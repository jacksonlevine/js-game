!function(I){var g={};function n(c){if(g[c])return g[c].exports;var l=g[c]={i:c,l:!1,exports:{}};return I[c].call(l.exports,l,l.exports,n),l.l=!0,l.exports}n.m=I,n.c=g,n.d=function(I,g,c){n.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:c})},n.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},n.t=function(I,g){if(1&g&&(I=n(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var c=Object.create(null);if(n.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var l in I)n.d(c,l,function(g){return I[g]}.bind(null,l));return c},n.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return n.d(g,"a",g),g},n.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},n.p="",n(n.s=4)}([function(module,exports,__webpack_require__){eval("var api = __webpack_require__(1);\n            var content = __webpack_require__(2);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3N0eWxlcy5jc3M/OTlhMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxVQUFVLG1CQUFPLENBQUMsQ0FBMkU7QUFDN0YsMEJBQTBCLG1CQUFPLENBQUMsQ0FBMEQ7O0FBRTVGOztBQUVBO0FBQ0EsMEJBQTBCLFFBQVM7QUFDbkM7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7OztBQUlBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTs7QUFFQSxpQkFBaUIsd0JBQXdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLEtBQXdDLEdBQUcsc0JBQWlCLEdBQUcsU0FBSTs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EscUVBQXFFLHFCQUFxQixhQUFhOztBQUV2Rzs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0EseURBQXlEO0FBQ3pELEdBQUc7O0FBRUg7OztBQUdBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEI7QUFDMUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsNEJBQTRCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG9CQUFvQiw2QkFBNkI7QUFDakQ7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, "html {\\r\\n  color:rgb(181, 171, 171);\\r\\n  background-color:rgb(0, 0, 0);\\r\\n  text-align:center;\\r\\n  font-family:JacksonFont;\\r\\n  font-weight:700%;\\r\\n  user-select:none;\\r\\n  height: 100%;\\r\\n  overflow: hidden;\\r\\n  width: 100%;\\r\\n  position: fixed;\\r\\n  touch-action: none;\\r\\n  overscroll-behavior-y: contain;\\r\\n  white-space: pre;\\r\\n  font-size:90%;\\r\\n  line-height:10px;\\r\\n  transform: scaleY(2) translateY(20%) translateX(-5px);\\r\\n  z-index:-1;\\r\\n  \\r\\n}\\r\\n\\r\\n@media screen and (max-width: 1000) {\\r\\n  #subcontainer {\\r\\n    transform:translateY(180px);\\r\\n  }\\r\\n  \\r\\n}\\r\\n\\r\\n#subcontainer {\\r\\n  display:flex;\\r\\n  flex-direction:row;\\r\\n  align-items: flex-start;\\r\\n  transform: translateY(-150px);\\r\\n}\\r\\n\\r\\n#container {\\r\\n  display:flex;\\r\\n  flex-direction: column;\\r\\n  justify-content: flex-start;\\r\\n}\\r\\n\\r\\n#time-span {\\r\\n  float:left;\\r\\n}\\r\\n\\r\\n#miniMap2 {\\r\\n  font-size:10%;\\r\\n  line-height:5px;\\r\\n  text-align:left;\\r\\n\\r\\n\\r\\n  z-index:0;\\r\\n}\\r\\n#miniMap {\\r\\n  font-size:10%;\\r\\n  line-height:5px;\\r\\n  text-align:left;\\r\\n\\r\\n\\r\\n  z-index:0;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n.terminal {\\r\\n  display:flex;\\r\\n  flex-direction: column;\\r\\n  justify-content: flex-start;\\r\\n  align-items: flex-start;\\r\\n  line-height: 19px;\\r\\n}\\r\\n\\r\\n#screenAndOverlay {\\r\\n  display:flex;\\r\\n  flex-direction: column;\\r\\n  align-items: flex-start;\\r\\n}\\r\\n\\r\\n#overlay {\\r\\n  font-family:monospace;\\r\\n  transform:scaleY(.5) translateX(45px) translateY(-225%);\\r\\n  font-size:100%;\\r\\n  font-weight:bold;\\r\\n  display:flex;\\r\\n  flex-direction:column;\\r\\n  align-items:flex-start;\\r\\n}\\r\\n\\r\\n#overlay p {\\r\\n  margin-top: 1px;\\r\\n  margin-bottom: 1px;\\r\\n}\\r\\n\\r\\n.terminal p {\\r\\n  margin: 0 10%;\\r\\n}\\r\\n\\r\\n.inputSpot {\\r\\n  height:30px;\\r\\n  margin:0 10%;\\r\\n  width:100%;\\r\\n}\\r\\n\\r\\n#inputText {\\r\\n  background-color: transparent; \\r\\n  border: 0px; \\r\\n  outline: none; \\r\\n  -webkit-box-shadow: none; \\r\\n  -moz-box-shadow: none; \\r\\n  box-shadow: none; \\r\\n  width:100%; \\r\\n  color:white; \\r\\n}\\r\\n\\r\\n#afterward {\\r\\n  margin:0 10%;\\r\\n  text-align: left;\\r\\n  user-select:none;\\r\\n  width: 100%;\\r\\n  touch-action: none;\\r\\n  overscroll-behavior-y: contain;\\r\\n  white-space: pre;\\r\\n}\\r\\n\\r\\n.terminal {\\r\\n  margin:0 10%;\\r\\n  position:fixed;\\r\\n  display:flex;\\r\\n  flex-direction: column;\\r\\n  justify-content: flex-start;\\r\\n  align-items: flex-start;\\r\\n  line-height: 19px;\\r\\n  transform: translateY(-75px);\\r\\n\\r\\n}\\r\\n\\r\\n.terminal p {\\r\\n  margin: 0 10%;\\r\\n}\\r\\n\\r\\n.inputSpot {\\r\\n  height:30px;\\r\\n  margin:0 10%;\\r\\n  width:100%;\\r\\n\\r\\n}\\r\\n\\r\\n#inputText {\\r\\n  background-color: transparent; \\r\\n  border: 0px; \\r\\n  outline: none; \\r\\n  -webkit-box-shadow: none; \\r\\n  -moz-box-shadow: none; \\r\\n  box-shadow: none; \\r\\n  width:100%; \\r\\n  color:white; \\r\\n}\\r\\n\\r\\n#afterward {\\r\\n  margin:0 10%;\\r\\n  text-align: left;\\r\\n  transform: translateY(-50px);\\r\\n}\\r\\n\\r\\n\\r\\n@font-face {\\r\\n  font-family: \\"JacksonFont\\";\\r\\n  src: url(data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAADLUAA0AAAACTWwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAyuAAAABwAAAAciOCdAUdERUYAADKcAAAAHAAAAB4AJwA+T1MvMgAAAZgAAAA9AAAAYGJWV0ZjbWFwAAAB+AAAAJEAAAFipfxxKmdhc3AAADKUAAAACAAAAAj//wADZ2x5ZgAAA1wAACtvAAJApEVcP/VoZWFkAAABMAAAADMAAAA2C04VjWhoZWEAAAFkAAAAGwAAACQF6ABsaG10eAAAAdgAAAAdAAAAegRyAEBsb2NhAAACjAAAAM4AAADkADoFPG1heHAAAAGAAAAAGAAAACABKxAUbmFtZQAALswAAANJAAAHYqmnSE9wb3N0AAAyGAAAAHoAAAChUr0kI3icY2BkYGAA4ju+fqnx/DZfGbhZGEDgpHjpZxB9/1P0HRDNrMZ0AEhxMDCBVAMAILEJ0wB4nGNgZGBgOsDAACH/LmNWY2BkQAWsAFE7A1gAeJxjYGRgYLAQEGL4xAACTAxoAAAfaQFQeJxjYGJqYJzAwMrAwsTAxAACEBqIjRnOgPgsDHDAyIAE3IJDghgcgIwqpgNgfQcQapgOgHkKDIwAIucHUAAAAHicY0hjgANGBwYGpgMMxAAFnGI8ROkHAgCsHgG2AAAAeJxjYGBgZoBgGQZGBhCIAfIYwXwWBgcgzcPAwcAEZDMw8DIoMEQxVP3/D1YH4jkyJAJ5jP+//n/8//D/vVAT4ICRjQEuxMgEJJgY0BRArMYLWFjZ2Dk4ubh5ePn4BQSFhEVExcQlJKWkZWQh8nLyCopKyiqqauoamlraOrp6+gaGRsYmpmbmhEymCwAArkcULwAAAHicVY6hawIBFMZ/3yUxGIaKC7YLHihoEGTcYGkMLAdW/wKT4WAXDBMMJkEQWRzMYNjGhbE0trKgGBYmSxcWHFgHFxd8rO3Bx3vf+33hg78J/qvgw3Ed3CV4z9C090kKpxF07O6UYLCHqWm+hVtjDy14GcHmCz5mkJhPVvB7gTKPKJdBRyEqXqFyhNwW8vKoZr4xQ/4NOr9GbcsEK9S9Qz1QP0aXKRq+oUkd3VdRbPxpjKyaXo2tK+jd9ucOfVvup4STDXHKKc7Z4gDZZDNJAAB4nO1dD4BM1fc/59z75s2f/YOx1u6SWRqbhNZYS8KTIkmS8iflT5J/CeHbd0VGkvInIl9J/lVSSZJERVaSSiXhK5WQ1FeRkOinWb87b3bX7JqZndmd3Z3dvTPvz7333XvO55z33r3nvHffvaCA+FEmZQIDFSxQBaoB2NPqxKVfXGurhjhWObky9h1x4MCIEQeGN7Il/0GZ/UeMmORZhicnN8iqSpkuDTJy6VWCZGgMbeF2GAD/ginwLLwK78F2+B6OQxbGog1T8TrsivfiGHwc5+Er+C5+ht/hMXRRDNWiq6kN3Ub9aTRNpv/QclpPn9K39Bv9w6LZZawR01gXdg8bxR5jc9nLbB37hO1jv7LzPIrX5A15a34r78cf5JP4M3wZf4dv49/wo/z/FItSQ2mgtFI6K32VkcqjyhzlJWWt8rGyV/mf8rfBbEgyXGVoabjF0McwwjDRMNvwouFtw1bDfw2/GM6pJjVRra9eq3ZSe6vDVaf6tPqCukb9SN2j/qyeNRoBHLVT6qY1SW/qaBxfLa6qaqhTdhLsEYJDQi8jCRK6hC6hR3yChF4aCbYYk/jFRJvMZlO0VuoRl7PUIUg8Eo/EI/FIPD4iuQHvxBIOaxKEBCFBSBASRJBhr2edBAoYwQIxUBmqQjwkQk2wQR2oC/XgKmgEjSENmkELaAVt4HpoDzdBJ7gVukI36Al3QR+4BwbAIBgKD8BIGA0PwVgYD06YBI/DkzAdZsJsmAvPwgJYBEvhJVgOr8FKeBPWwDvwLmyATfAhbIVPYDt8CTthN+yFb2E/HITD8DMchWNwAk7BGTgH5yELETmqaMZorIRWrIYJWANrYW204xVYHxtiKjbBdLwGW6KGbbEddsCbsTPehndgD+yFvbEf3osDcQhAanpc4MUuM4Qpg3bx59JKO1KRf+J2v3jPG8W9niju8avEvd1K3NO3inv5HnEPjxb37uPinn1W3KuviXt0g7g3vxT35EFxL56C8+L+ixb3XS1xv6WK+6ytuL/uEPfVQByBGfgoTsNncCG+jKtwPW7Gz3AXfo9H8Hc8S0AmqkJJdDk1oKbUmm6kLnQn9af7aQw9QlNoFs2nF2gFvU0b6WPaQd/QIfqVTtM/TGExLJ7ZWD3WmLVg17NOrBvrwwaxkWwsm8Sms7lsEVvO3mTvsg/Zdrab7Wc/sxPsHEdu5lZeg9t5Q57Otez3G+5nHMUXsEsWkoVkUU5ZtE60Vkm0WsOzc02Q1CQ1Sc29q2JNsloTi7LVJAlJImJJCN86x+6OhvrC0p4HR/BanITv4SE8hxc8tmlLdDcyuS1O9nox1ddR/7kC5S64VDClg6cSCrXc1REk1ZoYFnIFkPFX3E+x/NnzZXPkTXbEaUl6RSgWd8izeOL5Uy895juHv3yBcgcuU3BJz6IFJlCYksHmDpQjf6o7JG5PzXNchDyL5k0xN9XHMZ85/OYLkLuAMgWW9CyBi2vOQhT1UyiIjH4OeiVo8lmE7lOkujte5PbCCGeKvdgo56bYpRRSCilFaUiRx3OaUPiISysyCU/EtUkikogiCJEn4jH0ChfWilL4ooUpUUgUxYDCbT7X9WtD3wfD4d8wEabCHHgelsEbsA4y4VM0YmVMxDp4FaZhK2yPt+IkXIMbhG38DykUR3Zq6GWdJl8SsAeRkhtQUlPSqsZXc2SvLbBJSt06OWsapoTCpnAIhGfgjSD/mhdR/jXNhGFCaA0M41JYzSkQsPyrA+NykZowIPW4tGAJKRigoCM+Li2fKQIX8u6zMj3PEhCSfMZz9q7MXAcxEXO9RgSnv+y+04Nll5WZ5dOt9eLtvRBkFRGI0xXI9w7E23vRyJmVTVBAAs0nJd8l0XkhF+IFr5IXc2RL6Enz3mp+I56t0+njcZV2ATILIBUc9SwnOkN4rKVlARaCsSuT/HApkKP34nKKU5SNWyPw/cTK9wOuLKc4R56imQi+cjs1Z26l3zLfN6+xYIV4SIJaovZPgfrQCByQDi2gNbQV7UBH6AxdoTv0gj7QHwbCUNEujIKH4GGYAJNgCkyDmaKFmAcLYDG8CMthBayCNaKteB82wRbYBtthB+yCvfAdHIDD8Av8BifgNEBqmiPO4WO1B5lWFvN6daURJ9tHsPjTI+Hnvvxm5V6DCsSIq88G9aCxuOauh07QTVxpA8RV5oSn4QVxLX0Ee+BnOCssjwRhdzQQVkdn7Isj8VGcgy/hWvwY9+Ih/E3YH9F0GTUijbrQPTSKHqO5tJhepfdoO31PxymLxTIbS2XXsa7sbjaQ/Zs9yZ5jK9gG9gX7gZ3gwCvzJG7nTXl73oMP5mP5NP48X8k/4Dv4Pn6Y/6koSjUlRWmmdFDuVIYq45QZyjxlqfKWskXZrRxR/jKohuqGeoZrDB0Nd/j5gtqq1lQbqq3VW9V+6oPqJPUZdZn6jrpN3al+o/6oHlP/MoLRbKxqvMx4hbGx8VpjW/ed4m49UxunNy3GgLhm3WH3p+4Od/Occ7BsJEj0Er1EH1nYJPpITpDoSxX9xYQSCcV5vtsoytbl/ubE/emJ2RTtSSzliAQkAUlAElBpRyIQkC07ooV5b7N5PgEsytZmc1Pzhl0qYU2TMCQMCUPCKKMwbJ5wUbY2AECvdwGQWjm5sjvs0uBUxR3H0phgvNLYwniz8W7jA8YJxlnGpca3jFuMu41HjH+ZVFN1Uz3TNaaOprtMw0yPmGaalphWmz407TL9ZDpjNpjjzVeYm5tvMvcy328eb37KvNj8pnmz+WvzYfOfFsVSzZJiaWbpYLnTMtQyzjLDssiyypJp2Wn50XI6ikfFRdWNSo+6Mapn1JCoh6OmRy2MeiNqU9RXUYeiTkWz6KrR9uim0e2je0QPjh4bPS36+eiV0R9E74g+GH0yhmKsMZfHpMW0i+keMygmI2ZqzIKY12M2xnwZcyDmj1iMrRJbJ7ZJ7A2x3WIHxv479snY52JXxG6I/SL2h9gTlaBSZYB0t1/qdhXdPmNV9/vjspLgUNxvkSNgzLNCJNgjQ4VS62UkQWpdal1qPfITpNal1qXWIz1Bal1qXWo98hOk1ktlCG+zUVWNZot7a9FKPRJpQ9a6nKWuEqkfqR+pH6kfqR+pH6kfqR+pH6mfMqMfg8Dkja9UwoZcON7QSjjcTmpCakJqQmpCakJqQmpCakJqQmoizGGAsRW4P2dUme7fWIZff0noErqEHukJErqEXmGgY+XkyjaFM8YVg3tr0Eo94nKWOgSJR+KReCQeiccXnr6UaRV777RSCWsShAQhQUgQEkSQYdcw/WN28H7+WXpj3p6F83ABGapowVi0YjwmYS2sgylYHxuhA9OxBbbGttgeO2Jn7IrdsRf2wf44EIficByFD+HDOAEn4RSchjNxDs7DBbgYX8TluAJX4Rpch+/jJtyC23A77sBduBe/wwN4GH8BSE+rE+cIcrXLvGUyr9u1be4Y5ePvWlMhksdSpsHh86dViGS3Aty1na+67nJIg3aiRhsEGTAeJsJkeBJm5Blf+Vf4HU7BX/B/onaqkTvK8r04CO/HETga/41P4nOiptmAX+BO3IP7cD8ewlPEqCrZqSm1p47UmbpSd+pFfWgETaTZ9CK9Tetpg8DyEX1C++hXOs+iWE3WkDVmTdk1rBW7jrVj3dkglsGmsgVsMXuRLWcr2CqWyXayH9lpznkcT+A1eTK383q8AW/FO/O+fCR/lD/Op/Kn+Gz+H76cr+ef8m/5b/wfBXzXdUrJPBfzc2cWB3edWXLFENORT9RyLKa3qOVczBxRK4CYJXc23UbA6wnzs/+uGapB/FSje2vUvCPOQkRcn+dSFrS/CAM5TPBJTSsq7PAjnZ+DNQC1wsAuDqTZWIOlFiTs4kGqYy0UNf+wiwvp/ISsTkUllheo+9FiQu5PHDJ6Hy50uH1CQpiotpfoJLpygs412uMfPeblH1mEb5QEdaA+OKAFtIWO0BV6wF1wL9wPo2GcyDsdnoHn4SV4HVbDWtgIW+EL4S/thyNwHM6ACxU0YwxWw8uwLjbEpsJvaoe3YDfsrT+5GY4P4QScgjNxHi7G5bgK1wkPKhM/wa/wGzyI/8M/8BwBGakSxVECJVM9SqXm1IY6UBfqSf1oMD1AD9JYepSmCo/qOXqBXqO36D36kLbRdtpF39Fh+o1OC8+KMQuzsiRmY5ezq1gTdi27nt3Mbmd3sXvZ/Wy08LHGs8lsBpvLFrJlbCVbyzayrewL9rV7jpl41ZGaku6IC+PevbNLwpKwJFwKhG02zVYLi7J1aZKGpBH5NFrXstlsGPJG02RBWbBQBQEWucfOFjbkB0CggFHYkTFQGapCPCRCTbAJi7Iu1IOroBE0hpZwo7Aqe8NgYVFOgKkwF5bACnhD2JNvwzp4T9iUmbAFPoZP4XPYAV8L6/IQHIOzSBiN1bGOsCqb4/XYGW/DO7AH3osjcBw+gXNwEb6Kb+Mm/Az3CFvyO/wBf8UzhBQt7Ei7sCJb0o3UlXrTEBpDE2k6PUsv0Zu0gT6h3XSQjtFZRiyGJQhrsRG7ht3AbmW92H3sQWElPsHmsEXsVfY2y2Sfs2/YT+wEO88NvAq/jF/Jm/I2/GbenffnD/AMPpnP4gv4y3w138g/5Xv4IX6Mn1VIiVaqK3WUhkpz5Xqls9JLuU8ZqYxTpiizlYXKK8rbSqbyOUB6c3SEuCSnpzjS4x1qfIrqKNGgPXSIqSWNMSUghGDCxY8iREBFAW1PUVNzYgXxLwR7b+p+wvaC4RaAsfDXa/AChxgMRu7i1XzQshecubAqCQAvBO7hrqOK62IK6qwkpCSkaO6NHtA0V0/VWt2oJlRVrVW1Eg1mOVMSvP6lB6RnaWqhVJm7llur5sQSwkl44EW6ms9gwTIPLCZoLmcxKbNgmZ3FJFLpyRzJnIvr2i4wiPGx8WKJiQn3XpOEcwnnBAtLwN8Rv4iLyrDIqvCLuKjISv7kFRvh4lIFZOS+jzJCZUiEOnAVpEEraA+3Qk+4B4bCaBgPj8NMeBaWwmuwBjbAVvgS9sJBOAqn4DxyjMZqWAuvwFS8BtvizXgH9saBOAIz8FGchs/gQnwZV+F63Iyf4S78Ho/g73iWgExUhZLocmpATak13Uhd6E7qT/fTGHqEptAsmk8v0Ap6mzbSx7SDvqFD9Cudpn+YwmJYPLOxeqwxa8GuZ51YN9aHDWIj2Vg2iU1nc9kitpy9yd5lH7LtbDfbz35mJ9g5jtzMrbwGt/OGPJ1rAI5G2Fogj8XiC9glC8lCsiinLGym+HiTsXp1o1ZsAZdT8pA8JI/yzsOzzYmFb69JwpKwJFwKhHXfyvOeloMJYsAK1aEm1IYU4WOlQlNoARrcADdBZ7hd+Fq9oT8MgmHwIDwE42Ci8LmmwSyYC8/BYngJXoU3hO+1HjbCh7ANPoed8F/4TvhgR+BXOAF/wt+QhQyNwhergvFYA5OxLtbHqzFN+GSt8XrsgLdgV+yBd+M9wje7H0fiv/BhdOJknIozhY82Hxfhi/gKrsS39F6Cm/Fj3I5f4R78Fg/gT3hU+Gyn8Ry6iEilKKpM1YTvZiM7XUmNqAk1p1bUVvhwneg26k53AaSnpOudgULc2GUxWazATVSUzRadEPLG1VOWk+WC32Dd+Pi6wa6azFzGM7sfhbrbbC7a7PdBAQtUhnjRYteBetAI0kR73QbaQyfoKlrrPjAAhsJI0VaPh0nwJMwULfUCWArLYaVop9+FTbAVtotWei/sh8NwVLTRZ+A8IqqihbZiAtZCu2ifUzEdW2Jb0Tp3xjuwF/YTbfMwHIUZOEG0zNPwaZyHC0W7/CquwrX4vmiVt+EXuAv3iTb5CP6GJ/GsaJEZmSiW4kR7nEwp1IAcojVuTTdQR+oi2uK7qT8NpuE0hh6miTSFZtAcmk+LaRmtoNW0jjbSFvqUdtAevc12eHrwFnZrlxQkhQijUKlSJVvRFldfSUKSiFQSvEZSUo1gV01mLuOZQdgltoDjSYGjcvB/m8+f+2PFYFd4pwKP759gvNLYwniz8W7jA8YJxlnGpca3jFuMu41HjH+ZVFN1Uz3TNaaOprtMw0yPmGaalphWmz407TL9ZDpjNpjjzVeYm5tvMvcy328eb37KvNj8pnmz+WvzYfOfFsVSzZJiaWbpYLnTMtQyzjLDssiyypJp2Wn50XI6ikfFldC8AmV5GuniGCpa6kMqSOpDKkheMPKCiRAFSX1IBUl9SAV5EmzeM8E5ixqJtKmbXZlFliiz1IUIMFm3PGHyhMkTJk+YPGHyhMkTFiHiGcrVfLxFmpm47EtQvqQp+xKUL2nKvgTlS5qyL0H5kqbsSxBx0oDXN9wmsEJNSIFUaAE3QGfoCf1hGDwEE2EazIXF8CqsgY2wDXbCd3AETsDfyDAa4zEZ62MatsYO2BXvxoE4Eh/GyTgT5+OLuBLX4WbcjnvwAB7F0+gilSpTEtmpETWnttSJulM/GkpjaAI9SXNoIS2n1fQ+baUdtI8O03E6y5BZWByrxeoxB2vJ2rMurBcbwIazDDaJzWDz2FK2gq1lm9inbBfbz35hJ9l5rvBYnsDr8AY8nbfhHfkdvA8fzEfx8XwKf5ov4Mv4Kv4ugMP93C7N/fSrJEJ2yU1yk9wktzCEbKL+TrRaw7Nz9ZXUJDVJzb0TppHNak0Mz06T1CQ1SU3fwUVfY0nFm8tW+BopjrhgV7vMWybzagX9XE6ZI9w5fH+EUDGSvZ/fFDyefxo0E7VrK2gD14v69SboBLeKGrYb9IS7RB17DwyAQaKWfQBGwmhRz46F8eAUNe3j8CRMF3XtbJgLz4radhEshZdEffsarIQ3RY37DrwLG0Sd+yFshU9Erfsl7ITdot79FvbDQVHz/gxH4Zioe0/BGTgnat8sROSi/jVjNFYSNXA1TMAaog6ujXa8QtTCDTEVm4h6+BpsiZqoidthB7w5dxaBXtgb++G9oj4eApCaHh94scsMYcrg+/pz+bkuy2t6QXVRef4BXJdb15TsmDTVMBEvE/VDXbxS1A6NsamoG1q5LaoyMNpISRdziEBwq+eCDnnjcpb7clrw/xB+zvKTGbznovRtd9jhSmFzNIHmwt5oCzcKW+M24cvdBf3gPmFjjIAxwr6YIKg8CU8JL+5ZWAgvCJvCPVflO8KDyxS2xGfCf9sN++AHYUP8D44L++Es/CNsB4Pw3CphnKgTauHlWE/UCA5sJmyF64TPdjN2wW7CRuiLA3CI8NdGYwY+Iry1J3AGzha+2vO4FF8WntqbuBbfE37aR/gpfim8tG9wP/6Iv+AxPIl/4XkCUshMsVSVEugyqkNXUANqTOl0LbWhdnQT3UK3UTe6k3rTPXQfDXHPdOm2RuICL/a09DjVEfJGFqtgxUT9HOTqdU+6CryZI8VhK085bEX/hURDZi7VzN7+dgUclzG1bNSfslhZLBYZFXrFylHS9afMXJqZIfcd3JKK+Q4uNc0R5whytcu8ZTKvzyvf1bciJPv+aRUiGfL0L5DvwiLzLVL5yOD7Coy0d1XFne775ydzOUt2vwuzXfIcoAYkixqmPlwtahfv597dhP3UV9QoQ3Tr6d+iLnlU2E7T8zwJWAlvCbtpA2yGj/M8+f5F1Bcn4S84jyBqChPGiFqiOtbM8yyggHdhcYFeJsmD7oP6aXb63rj8pMuDFze+fn575pTXdC/7owLOh5maM5BQ8QXskoVkIVmUUxae71KLsnVpkoakEfk0ovXPr4uy1SQJSSJiSbjNYEvue/JesE74rMNxO6XQJDogrMx57LT7WXxynHv8Sfe4k+Het0RJW9KWtCONNrnHnjPrI48UeitpSBplgYbmNhQ9w+0UeqtJIpJImSICGRAFUbSG1lTE/iXpEdD/QeYt3rxRKQk+/q6eFSE5KsXnT6sQyZ7+JTZa4nfuvHJdt7XE4D9LCeUTFpk3cvLq/R0CLO63wDJHeHP4+fk5Us6SAW7KfU5ohppwtag5u0E/uF/UkbNhGawXteB/4RD8Keq7RGyAmqjVuuFgHCfqrhdwJWaKWuoHPEmc4qk2pZFGXek+yqDHaCY9RytpPW2nH+gk4yyW1WYNmMa6st5sMBvHprDn2DK2nm1nP7CT7B8eyxN5A96Mt+Xd+GA+mk/hs/ky91PKJulNW2DubDn6m6owJtVEr6C9ODj4ZGr3wb94mNp9KLCYmAZWYHiZBqnAcDAVYoWswyLwLbwOQ2bqW7Ji4xvi7VUUpkW5wwrBV/je7iHWnEnWKjbPW8ZCR7XsvSscxPJFXfmZhIG2y+lHgLAADSNtV2ZgIoWirb+NDoJKSMRzkYaT9iVIw0HcH9Ii0Q7xKg2OuDsoUqpYkzxvSUMK27J3WuGK5yGl5SFZOFKazQe6wiIpEin/0oRAylagPEERC06eAkjlw1JYYgVcKcGRCvJaKYgYwL+9bPw4sEF9aApt4GboDvfAMHF0EjwF8+ElWAXvwVb4Cr6Dn+Ek/CNs/ipYE69AB7bCDng79sEhOAadOA3/g0vxdVyHH+IX+A0ext/xb+EDxFIi2elqakHtqAvdRQPpQRpPT9AcWkSv0tu0iT6jPXSQfqO/GLIoFq/7BM1YW3YL68nuZcPZWDaZzWIL2MtsNdvAtrGv2X72P3aaZXETr8pr8St5S34j78p76z7CBD6Vz+VL+Ar+Dt/MP+d7+Y/8OD+nMCVGSVAuVxrl9R9KNOjL/iiRoF1KLCWWEhciGJyXWW7E9RnMNpe0MO8vMb7DtXeFG6lELBFf3BfkQ0Yc4Pz7bGs2PLu89mhRd5rEJrHl2/n3LUsbWd4dgCHXpxoBh/A23EJNaJY+Qle8r38xdheVDMs+w+Lr8uv7vV/w3Sj9bSXd4qUbni6wvn9F72bod2AzSbo4SBediNe4mQpYoDLEQ02oA/WgEaRBC2gD7aETdIWe0AcGwFAYCQ/BeJgET8JMmAsLYCksh5WwBt6FTbAVtsNO2Av74TAchRNwBs4joorRaMUErIV2rI+pmI4tsS12wM54B/bCfjgQh+EozMAJOBmn4dM4Dxfii/gqrsK1+D5uxm34Be7CfXgAj+BveBLPoosYmSiW4iiJkimFGpCDmlNruoE6UhfqTndTfxpMw2kMPUwTaQrNoDk0nxbTMlpBq2kdbaQt9CntoD3uVln/0rUIW7ukIClEGIVE4d8FXFyazFJ8WTS3mx3sKjOX8cze49u529BYiINaYNfbz9b6fN136G3ncBgDE2Cy3m4uhmWwCtbqbeYO2AMH9Hm7z8AFVDAW4/S2spE+d/cNejvZBwfgcByjt5EzcS4uxmV6+7gJt+IOfQ7vI3gCz+AFUvR2sZY+j3ea3iZ2pjuoDw3Q28MJNJlm0ly9LVxFa2mTPp/3HjpAR+gEnaELTGGx+pzedtaIpbHW7AbWmd3B+ujzeo9hE9hkNpPNZYvZMrZKn9t7a04benEG3PDE7WGm5zUfsMQr8Uq8+eIXJ9oNIZQzw2/ohfVmVDKsiAzdjWZ09kS2IQa1QpbLCUrWknUQQS97zgRWqAkpkAotdFuuJ/SHYfAQTIRpuh33KqyBjbANdsJ3ug33NzKMxnhMxvq6/dYBu+LdOBBH4sO67TYfX8SVuA4343bdbjuKp9FFKlWmJN1ma05tqRN1p340VLfXnqQ5tJCW02p6X7fV9tFhOk5nGTKLbqfVYw7WkrVnXVgv3UbLYJPYDDaPLWUrdPvsU7aL7We/sJPsPFd4LE/gdXgDns7b8I78Dt6HD+aj+Hg+hT/NF/BlfBV/F+Biy1ASIbvkJrlJbpJbGELZNkZ4djl2kaQmqVV0atm2UXh2mqQmqUlq+k64GV/m+hqVIBkaQ1u4HXrAYOFlPAKP6uNQvAKvCx9jM3wNh+FPVLAapmAz4VnciUNxHM7ARbgKM3En/oiniVMc1aV0upF60hB6mKbTLFpKy+gdeo+2C//hIP1EZ+hvZmZJ7CrhOdzC+rARbCKbzV5kb7Ot7L/CVzjHTTyR1+fX8k68Nx/OncI7eIGv4R/xT/g+vp//zk8pTFGV6koNpYGSqlyndFXuVcYojyvzlFeUd5XPlO+UY4rLEGOoZbja0MZwm6G/YbRhsuE/huWG9YZPDd8afjP8o4JaWY1T66pXqi3U1uqt6u3qAHWwOladpj6vrlQ/UHeoB9WTRjJajZcb04ztjN2Ng4wZxqnGBcbXjRuNXxoPGP8woamKqY6piamZqYOpk6m36R7TKNNDpidM000LTUtNb5m2mHabjpj+Mqvm6uZ65mvMHc13mYeZHzHPNC8xrzZ/aN5l/sl8xmKwxFuusDS33GTpZbnfMsIy0TLZ8h/Lc5YVllWWTMtHlj2WfQDpjdObprktjdqqIa5qfLUWWPQEh+Ie3sHdISdnqGVPp+viSbQXgwQlk+BQLpGnzCQUh9bldSOvG3ndyOtGXjeRlSCvG3ndyOumrF03fc1GVTWaLe6txVmIiGuJpvX1dKiN1ofZtxU97lrizUEr9YjL6Q1QK/WIK1OeNXnW5FmTZ02eNXnW5Fkr3rNmEHS9eYQUNmhaLi1Bt/CxdkVBEa6wwRtTaYWLpAl5PuT5kOdDng95PuT5KNXz4T0XoQlqQRsYDq/Cm7AZfkAVr8XxAMlpjjSH+0lNfXSHcmJ1steLqfmP+M7hL5f/3AWVyF1ZmsO9i3MX8E6Py6Hiq1CcN5tA1OPyYwoG0iWFgi2Ys5Km96LO1Dx7z5Lp+Xw9N54n9ZL0fEf9HPcsTvdBzZkbF7md+bLoJPIneh3ydzBPlsCZcrO6R5rRPHvPkl04N54n9ZL0fEf9HPcs5HQfdTov5nE6Ly3hdPqnk30sIJfcPAFzeZa83zQaIUYfGSARbPrYAFdBY2imjw5wPdykjw/QDe7KHiHgARitjxHghMf1UQJmw7OwSB8n4DVxb7tHCtgAH2aPFbAbvtVHC/gZjunfP56DLOT6iAGVsJo+ZkBtvCJ71IBrUNPHDbgZb9NHDuiN9+IQfeyAf+E4/cvIJ/Cp7PEDluDL+ggCb+F6fQyBj/Az/EofReB7/FEfR+B3/DN7JAEDRenfTFany/TRBK6kqwH0ua/jUtPjgg/YZZEKXKSKNUnzsbp8JVaIA6ISFfVMwK3MUoxZvMYh85rnGcD9Csw9rJS7fQ/3kFJpkna5oe0eqYoyzUUbZ0rSCD8N4UP1zX4+W+itUxLxSUQfn60oRPKMBUK65WzRbeequvVcU7ef6+oWdCNhQ6fpVnQr3Y5ur1vSt+q2dE/dmr5H2NODdIt6pG5Tj9Wt6km6XT1dt6znCtt6gW5dv6Tb1yt1C/sd3cbepFvZnwg7+0vd0t6r29oHdWv7qG5vn9It7vPC5kbd6jbrdrdVt7xr6La3Xbe+Gwr7u4lugbfUbfB2uhXeWbfDe+iWeD9hiw/EIe6xQOIDL/Z03Wbyv9glheAoeHmWLq20IxX5l2/8n5wx9OzQQNzfLeGGfOPnZcBEcf8+DfP1UYBWwGpYJ+7VbbBD3KEH4Bc4Dqfhb30kIIu4F5OwjrgDHdhcHwuoI3bBnuJuG4wjMQMn4hScgXNwvj4e0Epcixtxa57R8k7jeeHhWsiab6S89tSZulMfGkjDaBRl6OMCzaC5tJCW0UpaS+/TZtpGX9Au2keH6CidpL8ZMpVFMytLYLVYCmvE0llr1p51BkhPSXfEqw4/W0W3URxxjiD39oDUQqMZmJZEJpFFIrJbK1WyVarU18/W9aYwM/QX9D43rsClC6Lh+koyl8xDYc5rJCXVyL9yty2t+d1c76tM4HI+i0g2ZZYNCMuo1OceC8csYIWckKfo8/hIxuWfsSl7spkg967McGeUlEuWcgjTs4QpjyRXZHLe/VhiIR0egh3CW78Jh+Erwv++j47q/Vji3O8J61zszZIbz7933/jZa8B8AcoVqnwQ9MJCNwQ+Xr1rcuvEuDQfhDyHclafWQIXCalocKSKRDI0FmFlVTjWOStpHgNP7/WTz+jz6g/k1zC8pOdQYDvSV5kQShZAI7tfUnblnLdE7mF/JPNRKRiDT+ahCBFAhpB0EQzB7G5S7irQ01VKD13ceHWbynfEV56CcvovE3zJgmjkdMXKrtWdeQtd7EXlj2z+3lYFA/HdSysUUQL19gpJJcFQzOkZBvB4wHdcV4ADWkEHuB36wCAYCWOFLzcd5sELsBLWwxb4EvbCQTgKp/R3T2ashsl4FabjddhR+HN34304HB/Ufbrp+Cy+hKvwPdyCn+Me/AF/wdN4gcxUjWpTQ0onjTrQbdRLtLIjaRxNodm0kF6mVbSeNutzSh+iY3SWEYth8czG6rHGrAVrz7qyPmwo+xebyKayOex5toy9wd5lW9lX7Dv2CzvN/uEKj+Hx3Mav4un8Ot6J9+D9+f18DH+ET+Gz+AL+Ml/NN/BP+G6+n//MT/BzCgKkN0eH/yU5PcWRHu9Q41NUR+GCSiNhV9TCWHQEEbCXLLt0LwFTvcikFiPPFL969YfAL5rQVJuipuYULYh0fu5eRSP5dPpiF9SpLLR8Bem0GE5joWTMh6NwHEO8K0q0DiiKgI6eKe5/QorTNV+1VjeqCVVVa1VnQUHNZ2pWVVN8vMlYvbrReUkg85IU1+uF4+IVdD0TCkNrwSIWyNGHiJcyyg0M86fVAvkEFjIAS9cua9Wcsj1DYLj8YjHX8SD4+DyNoYjlU8LiZOglYVaDIPhcZDjHp0pDknB3SAyPFY6LFvCiKV6Gge79S6/bgu/9Am+WoCTMZYjxsfFiiYkJdo+ecjnl/e/bSMrelHPKFEQxJxQJmIOlGDrmYLURSWewDFKGmQH828ugNtSFK6EhNIfroTPcCQNgBIyCf0EGjAMnPAZPCG93FiyA5fAWbIRPYBf8F/bB93AADsMv8BucgNNwAS0Yj3WwITbHltgGb8AO2Al7YH98ADPwMZyJc3AeLsDF+CK+ge/iR7gDv8UjeBSP40k84/VmM5VaUhu6QfjBnagL3U2DaBQ9QlPpP/QcLaIXhDf8Gr0jvOHPaS/9SMfppHv8X3IxZFHCJ67NGrBmrK3wiTuyzsIv7s76swdYBnuMzWTPsUXsBfYye033jj9iO9i37Aj7g/3JzgkPGTgP6PHa0+rEOfKtSpGdmJRCcAjR2A6aRTDeiV/exaOeCKeaTzM+6fryA0uPcGlpN1LBYmXHpX+P0+d0uj52rMn+uz4unAnoHRQ0I52i63hFpHa86A5MsVGLZEnDgO3t3G7nqDhyf0qoppBWaoVvKONlQzXBw1W2tDCHytc1gTJdWv5VmNO6Tc3q5pnnYoCwmqfAs/AqvAfbhYV8HLIwFm2YitdhV7wXx+Djwgp+Rdi/n+F3eAxdFEO16Gph795G/Wk0TRZW7nJaT5/St/Qb/cOi2WWsEdNYF3YPGyVs2LnCel3HPmH72K/sPI/iNXlD3prfyvvxB/kk/gxfxt/h2/g3/Cj/P8Wiz2bRSums9FVGKo8qc5SXlLXKx8pe5X/K3wazIclwlaGl4RZDH8MIw0TDbMOLhrcNWw3/NfxiOKea1ES1vnqt2kntrQ5XnerT6gvqGvUjdY/6s3rWaDQmGK80tjDebLzb+IBxgnGWcanxLeMW427jEeNfJtVU3VTPdI2po+ku0zDTIwD2/IPUJheYcMn4wSVTRA2dhhROCieFk8JJ4aRwUjgpXOQJhzZG4qdviBD8x1yZCudMERvOuILgP+bKVA2qwWA0iK1iRPAfc2WajMIkNBvF1mjOMzQw5o2BdywrU4KWoCVoCVqClqAlaFN0Qi4ob4D5woZsPAo3cOYvnAPFoIqd37BqtLgRmkzBjvHbUwKUACVACVAClACLBNB7/KlL360shdfgffgc9sPvcAErYTI2xrbYCbvjIMzAqbgAX8eN+CUewD/wbyGMlS6nNGpH3WkQZdBUWkAv0Ur6QJ87/CQjZmWXszTWjnVmPdhgNpZNY8+zlewDtoMdZCc5cSu/nKfxdrw7H8Qz+FS+gL/O1/IP+A5+kJ9USLEqlytpSjulu9JXGayMVaYpzysrlQ+UHcpB5aSBDBZDVYPd0NTQ3tDDMNgw1jDN8LxhpeEdwybDV4ZDhlMqU6uqdrWp2l7tofZThwCk5/fgI2VqRMUdyX3G4E695MFJJEH1fOepY02NeLBlSK9lDaoj4qFeir3AJ5QRhdQdceSoW0INI9RkCbU4ofb1dsy1Eoq4llSxJlmtibQp0Vol0Wp15UHhLD7GzvwoEtENo3U2jCXBFSwy57zKOOhRBuYo42BRKRYmW5YtG0W2LrJsRRWyMCrL6utBka2KrCJfnUU+b1mZeZ+blYpWFnvUoXmUk+X/Mi3OC6SPB0RmNgj/p6YY75WsWh4QmKMKW1gZB1txHMhGkekLRYlVotkoKFsXUUG5omEKRwnGSdYqHs43lzBnIbXgnFil5DmXnswVjnMeFN7PRkpWfo/kHi1IzhWDs/vR28f68zen7NscuG+zaaZpiWm16UPTLtNPpjNmgznefIW5ufkmcy/z/ebx5qfMi81vmjebvzYfNv9pUSzVLCmWZpYOljstQy3jLDMsiyyrLJmWnZYfLaejeFRcVN2o9Kgbo3pGDYl6OGp61MKoN6I2RX0VdSjqVDSLrhptB0hvnN40rUlK3Tq1VUNc1fhqjuT8CUrJ5IgQh67gBLvUmNSY1FiEJUiNSY1JjUVagtSY1JjUWKQlSI2FmtDXu0MLat6xC6Bwxrji7sfCDah5xy6A6vaKs31j1LxjF8BsVFWj2eLeWlDzjrnyPCPXSiOSBVJkKbIUWYosRZYiS5GlyFLkkov4/TLHIOTyljE37H6N7S3gxbCQyFu63HBQ/aaLI+y3s7gUTgonhZPCSeGkcFI4KVypCQcA/w94SDHvAHicpVRNb9RWFD2eD/JF2EQCqU3RXSFVCHsyIEQQC6KRJs0OJVK6QRW2xxk/ZmwP9hucYVOkSuxY8RPYVOqqXbf/oWrVDf8Aqb+gqx4/v4RkNEAk5mn8ju97955z77t+AMR5BQf1bxP3LXawgR8tbmAJby1u4jreW9zC185Di9tYc7TFl7Dh/GzxEh407lq8jOuNXy1ewXrjX4tX0Wk+tngN15p/WHwZ2609i9ex2TqxX8HNdtfiDXzb/o2qnNYK3+4ZhRV2cAPfW9ygxxuLm3iAXyxu4a6zbHEbV53HFl/CDeelxUs4dn63eJm5FBav4KvGnxav4knjP4vX4DZfW3wZefMfi9dxr/WTxVdw2Hpn8Qb22z+ghwwTzJBDYYgYGoIdDPgWISXexZSzz3XNp6CLDrb4Ry+bzHI1jLXsDFSUyu409XPtS7ezxdUDuud0SBl0xFkZLHjEWXNUqym3RbmfDke+8lN55Gsd5TTuc3VI2rGhxX40nI59gj6lpvQ94D/nemjEXpCpn6X6QOfTUMtC0ouFkXlxC2LJqeBD41UwVmZ8t+BWlTuM8kJlqWy5Hy3UrU8U6tap5sUFUWQUc1baRB4wRmLUjmjLcMRnnz57Zj6JEJs+EFrTU9ZKQa3dZ75VLyQI8N25YqpCfNG5P4gSPx9JdiT9gz0xG+JsIntpJdXXzNcfy24S0Ds2iU34wXscR1ZCcSYJ94y1FubSnpEesdaT+553RILCKHANJJcbZlz/eO/iXJ9CNi925vINLSUtVVUDRlSshTY2xTk+V8UPKawCfy1ojr+l9AsJpmqspVQ6lg+lXJ2vTGnG52tRluVcEb6kwov3121QcLXeXxLdYTNvc3Sry+/T53LGzk4oPNpL705ne7tL1x5ZIttsz4nEXEoJR81ZXUjaaFHmAE7UoJdH7KznkfSyJGFY2dE6V8G04pgvQjhHEp6jcDnn7AKPZ6u4FhlrZBIOeDt6uG2+Xe800dByhzW1m+VDb6zCKC2iwgtm3m2341Vf6ElKgblfBc+YgE+GEd9TY3nB9QnVzsxdIXhKLXWHJbTVvXdsIkTsbfSrhAM1lGdTPxypdCgvokk8ywt5mrGpkhk77FiCaID/ATilg8kAAAB4nG3LyW5BAQBA0YOkfqQULZ65hu7MU1FjsUYi0o2Fv+9Luu256yvqTynsP+9EopGYmGcJSS9S0jJevcnKyQsUFMO7rKKqFh51DU0tH9o6unr6BoZGxiamPs3MLXxZWlnb2Nr5tndwfDpdHz/nQvx+uwRB0P4Fhy8SRwAAAAAAAf//AAJ4nGNgZGBg4AFiMSBmYmAEQnMgZgHzGAAF+wBmAAAAAQAAAADf1ssxAAAAAMkXdfMAAAAA3/Jb3A==) format(\'woff\');\\r\\n}  \\r\\n\\r\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\'; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || \'\').concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n  return "/*# ".concat(data, " */");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRDQUE0QyxxQkFBcUI7QUFDakU7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EscUJBQXFCLGlCQUFpQjtBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLHFCQUFxQjtBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsOEJBQThCOztBQUU5Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxjQUFjO0FBQ25FO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/css/styles.css\nvar styles = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/perlin.js\n//  JAVSCRIPT IMPLEMENTATION OF IMPROVED NOISE   -   COPYRIGHT 2002 KEN PERLIN.\r\n\r\nconst p = new Array(512);\r\nconst permutation = [\r\n  151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140,\r\n  36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234,\r\n  75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237,\r\n  149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48,\r\n  27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105,\r\n  92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73,\r\n  209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86,\r\n  164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38,\r\n  147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189,\r\n  28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101,\r\n  155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\r\n  178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12,\r\n  191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,\r\n  181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\r\n  138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215,\r\n  61, 156, 180,\r\n];\r\n\r\nfor (let i = 0; i < 256; i++) {\r\n  p[256 + i] = p[i] = permutation[i];\r\n}\r\n\r\nconst fade = (t) => {\r\n  return t * t * t * (t * (t * 6 - 15) + 10);\r\n};\r\n\r\nconst lerp = (t, a, b) => {\r\n  return a + t * (b - a);\r\n};\r\n\r\nconst grad = (hash, x, y, z) => {\r\n  const h = hash & 15;\r\n  const u = h < 8 ? x : y,\r\n    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\r\n  return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\r\n};\r\n\r\nclass ImprovedNoise {\r\n  static noise(x, y, z) {\r\n    const X = Math.floor(x) & 255,\r\n      Y = Math.floor(y) & 255,\r\n      Z = Math.floor(z) & 255;\r\n    x -= Math.floor(x);\r\n    y -= Math.floor(y);\r\n    z -= Math.floor(z);\r\n    const u = fade(x),\r\n      v = fade(y),\r\n      w = fade(z);\r\n    const A = p[X] + Y,\r\n      AA = p[A] + Z,\r\n      AB = p[A + 1] + Z,\r\n      B = p[X + 1] + Y,\r\n      BA = p[B] + Z,\r\n      BB = p[B + 1] + Z;\r\n\r\n    return lerp(\r\n      w,\r\n      lerp(\r\n        v,\r\n        lerp(u, grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z)),\r\n        lerp(u, grad(p[AB], x, y - 1, z), grad(p[BB], x - 1, y - 1, z))\r\n      ),\r\n      lerp(\r\n        v,\r\n        lerp(u, grad(p[AA + 1], x, y, z - 1), grad(p[BA + 1], x - 1, y, z - 1)),\r\n        lerp(\r\n          u,\r\n          grad(p[AB + 1], x, y - 1, z - 1),\r\n          grad(p[BB + 1], x - 1, y - 1, z - 1)\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n// END OF IMPROVED NOISE\n// CONCATENATED MODULE: ./src/script.js\n\r\n\r\n\r\nonload = function () {\r\n  let levels = new Array(\r\n    "gg",\r\n    "gg",\r\n    "gg",\r\n    "gg",\r\n    "gg",\r\n    "aa",\r\n    "nn",\r\n    "rr",\r\n    "pp",\r\n    "ss",\r\n    "oo",\r\n    "qq",\r\n  );\r\n\r\n  let deltaTime = 0;\r\n\r\n\r\n  let playx = 0.0;\r\n  let playy = 0.0;\r\n\r\n  let mobSkins = [];\r\n\r\n  const defaultSkin = [\r\n    "qqggqq" +\r\n    "ggqqgg" +\r\n    "qqggqq" +\r\n    "ggoogg" +\r\n    "ooggoo",\r\n\r\n    "qqgggg" +\r\n    "xxqqgg" +\r\n    "ggooqq" +\r\n    "yyyyyy" +\r\n    "ooggoo",\r\n\r\n    "ggqqgg" +\r\n    "xxooxx" +\r\n    "ggqqgg" +\r\n    "yyooyy" +\r\n    "ooggoo",\r\n\r\n    "ggggqq" +\r\n    "ggqqxx" +\r\n    "qqoogg" +\r\n    "yyyyyy" +\r\n    "ooggoo"\r\n  ];\r\n  const ginkSkin =\r\n    [\r\n      "pppppppppppppp" +\r\n      "ppppqqqqqqpppp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "ppqqppqqqqqqpp" +\r\n      "pppppppppppppp",\r\n\r\n      "pppppppppppppp" +\r\n      "ppppqqqqqqpppp" +\r\n      "ppggaaqqqqqqpp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "aaaaqqqqqqqqpp" +\r\n      "ppqqppqqqqqqpp" +\r\n      "pppppppppppppp",\r\n\r\n      "pppppppppppppp" +\r\n      "ppppqqqqqqpppp" +\r\n      "ppaaggqqggaapp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "ppqqaaaaaaqqpp" +\r\n      "ppqqppqqqqqqpp" +\r\n      "pppppppppppppp",\r\n\r\n      "pppppppppppppp" +\r\n      "ppppqqqqqqpppp" +\r\n      "ppqqqqqqaaggpp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "ppqqqqqqqqaaaa" +\r\n      "ppqqppqqqqqqpp" +\r\n      "pppppppppppppp",\r\n    ];\r\n\r\n  mobSkins.push(defaultSkin);\r\n  mobSkins.push(ginkSkin);\r\n\r\n  let mobiles = [];\r\n  let statics = new Map();\r\n\r\n  for (let i = 0; i < 1300; i++) {\r\n    let x = (Math.random() * 2000) - 1000;\r\n    let y = (Math.random() * 2000) - 1000;\r\n    let rock = {\r\n      x: x,\r\n      y: y,\r\n      width: 8,\r\n      height: 4,\r\n      thing:\r\n        "000qqo00" +\r\n        "0oqqqoo0" +\r\n        "aooqqqoo" +\r\n        "gaaoooqo"\r\n    };\r\n    statics.set(parseInt(x) + "," + parseInt(y), rock);\r\n  }\r\n\r\n  for (let i = 0; i < 2000; i++) {\r\n    let x = (Math.random() * 2000) - 1000;\r\n    let y = (Math.random() * 2000) - 1000;\r\n    let tree = {\r\n      x: x,\r\n      y: y,\r\n      width: 26,\r\n      height: 14,\r\n      thing: makeTree()\r\n    };\r\n    statics.set(parseInt(x) + "," + parseInt(y), tree);\r\n  }\r\n\r\n  for (let i = 0; i < 3000; i++) {\r\n    let x = (Math.random() * 2000) - 1000;\r\n    let y = (Math.random() * 2000) - 1000;\r\n    let tree = {\r\n      x: x,\r\n      y: y,\r\n      width: 25,\r\n      height: 25,\r\n      thing: makeBigTree()\r\n    };\r\n    statics.set(parseInt(x) + "," + parseInt(y), tree);\r\n  }\r\n\r\n  for (let i = 0; i < 2000; i++) {\r\n    let x = (Math.random() * 2000) + 1000;\r\n    let y = (Math.random() * 2000) + 500;\r\n    let tree = {\r\n      x: x,\r\n      y: y,\r\n      width: 26,\r\n      height: 14,\r\n      thing: makeTree()\r\n    };\r\n    statics.set(parseInt(x) + "," + parseInt(y), tree);\r\n  }\r\n\r\n  for (let i = 0; i < 3000; i++) {\r\n    let x = (Math.random() * 2000) + 7000;\r\n    let y = (Math.random() * 2000) + 750;\r\n    let tree = {\r\n      x: x,\r\n      y: y,\r\n      width: 25,\r\n      height: 25,\r\n      thing: makeBigTree()\r\n    };\r\n    statics.set(parseInt(x) + "," + parseInt(y), tree);\r\n  }\r\n\r\n\r\n  let player = {\r\n    x: 0,\r\n    y: 0,\r\n    myIndex: mobiles.length,\r\n    direction: 0,\r\n    foottimer: 0.0,\r\n    isWalking: false,\r\n    leftfoot: false,\r\n    id: 0,\r\n    width: 3,\r\n    height: 5,\r\n    elevation: 0\r\n  };\r\n  mobiles.push(player);\r\n\r\n  let player2 = {\r\n    x: 0,\r\n    y: 0,\r\n    myIndex: mobiles.length,\r\n    direction: 3,\r\n    foottimer: 0.0,\r\n    isWalking: false,\r\n    leftfoot: false,\r\n    id: 1,\r\n    width: 7,\r\n    height: 7,\r\n    elevation: 0\r\n  };\r\n  mobiles.push(player2);\r\n\r\n  let player3 = {\r\n    x: 14,\r\n    y: 6,\r\n    myIndex: mobiles.length,\r\n    direction: 2,\r\n    foottimer: 0.0,\r\n    isWalking: false,\r\n    leftfoot: false,\r\n    id: 1,\r\n    width: 7,\r\n    height: 7,\r\n    elevation: 0\r\n  };\r\n  mobiles.push(player3);\r\n\r\n  let playheight = window.innerHeight / 24;\r\n  let playwidth = window.innerWidth / 18;\r\n  let statOverscan = 20;\r\n\r\n  function noiseValueFromCoord(i, j, scale, offset) {\r\n    let heel2 = ImprovedNoise.noise(parseFloat((i) / 5.1), parseFloat(j) / 5.1, 7.2) * 2;\r\n    let heel1 = ImprovedNoise.noise(parseFloat((i) / 300.1), parseFloat(j) / 300.1, 7.2) * levels.length + 2;\r\n    let heel = parseInt((ImprovedNoise.noise(parseFloat((i) / 50.1), parseFloat(j) / 50.1, 10.2) * levels.length + 2) + parseFloat(heel1) + parseFloat(heel2));\r\n    if (scale != null && offset === null) {\r\n      return heel * scale;\r\n    } else\r\n    if (scale != null && offset != null) {\r\n      return (heel + offset) * scale;\r\n    } else {\r\n      return heel;\r\n    }\r\n  }\r\n\r\n  function isWater(x, y) {\r\n    return (noiseValueFromCoord(parseInt(x), parseInt(y)) < 1);\r\n  }\r\n  let mobSpots = new Map();\r\n  let statSpots = new Map();\r\n  let overSpots = new Map();\r\n  function stringBuild() {\r\n    playheight = window.innerHeight / 24;\r\n    playwidth = window.innerWidth / 19.5;\r\n    var theString = "";\r\n    mobSpots = new Map();\r\n    statSpots = new Map();\r\n    overSpots = new Map();\r\n    for (let j = playheight + statOverscan; j > 0; j--) {\r\n      for (let i = -statOverscan; i < playwidth + statOverscan; i += 19) {\r\n        theString += oneCharStringBuild(i, j);\r\n        theString += oneCharStringBuild(i + 1, j);\r\n        theString += oneCharStringBuild(i + 2, j);\r\n        theString += oneCharStringBuild(i + 3, j);\r\n        theString += oneCharStringBuild(i + 4, j);\r\n        theString += oneCharStringBuild(i + 5, j);\r\n        theString += oneCharStringBuild(i + 6, j);\r\n        theString += oneCharStringBuild(i + 7, j);\r\n        theString += oneCharStringBuild(i + 8, j);\r\n        theString += oneCharStringBuild(i + 9, j);\r\n        theString += oneCharStringBuild(i + 10, j);\r\n        theString += oneCharStringBuild(i + 11, j);\r\n        theString += oneCharStringBuild(i + 12, j);\r\n        theString += oneCharStringBuild(i + 13, j);\r\n        theString += oneCharStringBuild(i + 14, j);\r\n        theString += oneCharStringBuild(i + 15, j);\r\n        theString += oneCharStringBuild(i + 16, j);\r\n        theString += oneCharStringBuild(i + 17, j);\r\n        theString += oneCharStringBuild(i + 18, j);\r\n      }\r\n      if (j < playheight) {\r\n        theString += "\\n";\r\n      }\r\n    }\r\n    return theString;\r\n  }\r\n\r\n  let miniMapX = 3;\r\n  let miniMapWidth = 9;\r\n  let miniMapY = miniMapWidth + 2;\r\n  function oneCharStringBuild(i, j) {\r\n    let theString = "";\r\n    let iterationX = i + playx;\r\n    let iterationY = j + playy;\r\n    let heel = noiseValueFromCoord(i + playx, j + playy);\r\n    let isMob = false;\r\n    let isStat = false;\r\n    let coordChar = parseInt(iterationX) + "," + parseInt(iterationY);\r\n\r\n    if (parseInt(i) === miniMapX && parseInt(j) === miniMapY) {\r\n      for (let m = miniMapWidth; m > 0; m--) {\r\n        for (let n = 0; n < miniMapWidth; n++) {\r\n          let mmSpot = parseInt(iterationX + n) + "," + parseInt(iterationY - m);\r\n\r\n          let overPix;\r\n          if (m === miniMapWidth || m === 1) {\r\n            overPix = {\r\n              brick: "yy"\r\n            };\r\n            if (!overSpots.has(mmSpot)) {\r\n              overSpots.set(mmSpot, overPix);\r\n            }\r\n          } else {\r\n            overPix = {\r\n              brick: "gg"\r\n\r\n            };\r\n            if (!overSpots.has(mmSpot)) {\r\n              overSpots.set(mmSpot, overPix);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n\r\n      if (statics.has(coordChar)) {\r\n        let stat = statics.get(coordChar);\r\n        let statWidth = stat.width;\r\n        let statHeight = stat.height;\r\n        for (let t = 0; t < statHeight; t++) {\r\n          for (let c = 0; c < statWidth; c++) {\r\n            let charOfTheStat = stat.thing.charAt((t * statWidth) + c);\r\n            if (charOfTheStat != "0") {\r\n              var statPixel = {\r\n                x: parseInt(iterationX) + c,\r\n                y: parseInt(iterationY) - t,\r\n                brick: "" + charOfTheStat + charOfTheStat,\r\n                statX: iterationX,\r\n                statY: iterationY,\r\n                sHeight: statHeight\r\n              };\r\n              if (!statSpots.has(parseInt(iterationX + c) + "," + parseInt(iterationY - t))) {\r\n                statSpots.set(parseInt(iterationX + c) + "," + parseInt(iterationY - t), statPixel);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      }\r\n    }\r\n    for (let a = 0; a < mobiles.length; a++) {\r\n      let mobY = ((isWater(mobiles[a].x, mobiles[a].y)) ? Math.min(Math.floor(mobiles[a].y + noiseValueFromCoord(mobiles[a].x, mobiles[a].y, 1, 0)), mobiles[a].y) : (mobiles[a].y + noiseValueFromCoord(mobiles[a].x, mobiles[a].y, .5, 0))) + mobiles[a].height + mobiles[a].elevation;\r\n      let mobX = mobiles[a].x - Math.floor(mobiles[a].width / 2);\r\n      if (parseInt(mobX) === parseInt(iterationX) && parseInt(mobY) === parseInt(iterationY)) {\r\n        let mobID = mobiles[a].id;\r\n        let mobWidth = mobiles[a].width;\r\n        let isInWater = isWater(mobiles[a].x, mobiles[a].y);\r\n        let mobHeight = (isInWater) ? Math.floor(Math.min(mobiles[a].height + (noiseValueFromCoord(mobiles[a].x, mobiles[a].y, 1, -1)), mobiles[a].height)) : mobiles[a].height;\r\n\r\n        if (mobiles[a].isWalking) {\r\n          if (mobiles[a].foottimer > 100) {\r\n            mobiles[a].leftfoot = !mobiles[a].leftfoot;\r\n            mobiles[a].foottimer = 0;\r\n          } else {\r\n            mobiles[a].foottimer += deltaTime * 5;\r\n          }\r\n        }\r\n        for (let m = 0; m < mobHeight; m++) {\r\n          for (let o = 0; o < mobWidth; o++) {\r\n            var mobPixel = {\r\n              x: parseInt(iterationX) + o,\r\n              y: parseInt(iterationY) - m,\r\n              brick: "" + mobSkins[mobID][mobiles[a].direction].charAt((((m * mobWidth) + o) * 2)) + mobSkins[mobID][mobiles[a].direction].charAt((((m * mobWidth) + o) * 2) + 1),\r\n              mobX: iterationX,\r\n              mobY: iterationY\r\n            };\r\n            if (!isInWater) {\r\n              if (o === mobWidth - 1 && m === mobHeight - 1) {\r\n                if (mobiles[a].leftfoot) {\r\n                  mobPixel.brick = "gg";\r\n                }\r\n              }\r\n              if (o === 0 && m === mobHeight - 1) {\r\n                if (!mobiles[a].leftfoot) {\r\n                  mobPixel.brick = "gg";\r\n                }\r\n              }\r\n            }\r\n            if (!mobSpots.has(parseInt(iterationX + o) + "," + parseInt(iterationY - m))) {\r\n              mobSpots.set(parseInt(iterationX + o) + "," + parseInt(iterationY - m), mobPixel);\r\n            }\r\n          }\r\n        }\r\n\r\n      }\r\n    }\r\n    let isOverlay = false;\r\n    let mobPix = {};\r\n    let rightnowbrick = "";\r\n    if (overSpots.has(coordChar)) {\r\n      isOverlay = true;\r\n      rightnowbrick = overSpots.get(coordChar).brick;\r\n    } else {\r\n      if (mobSpots.has(coordChar)) {\r\n        mobPix = mobSpots.get(coordChar);\r\n        rightnowbrick = mobPix.brick;\r\n        isMob = true;\r\n      }\r\n      if (statSpots.has(coordChar)) {\r\n        let statPix = statSpots.get(coordChar);\r\n        if (isMob) {\r\n          if (Object.hasOwn(mobPix, \'mobY\')) {\r\n            if (mobPix.mobY - 5 > statPix.statY - statPix.sHeight) {\r\n              rightnowbrick = statPix.brick;\r\n            }\r\n          }\r\n        } else {\r\n          rightnowbrick = statPix.brick;\r\n        }\r\n        isStat = true;\r\n      }\r\n    }\r\n    if (i > 0 && i < playwidth && j > 0 && j < playheight) {\r\n      if (isMob || isStat || isOverlay) {\r\n        theString = rightnowbrick;\r\n      } else {\r\n        if (heel <= levels.length - 1 && heel > 0) {\r\n          theString = levels[heel];\r\n        } else {\r\n          if (heel > levels.length - 1) {\r\n            theString = levels[levels.length - 1];\r\n          } else {\r\n            let date = new Date();\r\n            if (parseInt(ImprovedNoise.noise(parseFloat(iterationX) / 10, parseFloat(iterationY) / 10, date.getTime() / 10000) * 10) === 0 && parseInt((iterationY * playwidth) + iterationX) % 4 === 0) {\r\n              theString = levels[0];\r\n            } else {\r\n              theString = "gg";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return theString;\r\n  }\r\n\r\n  let mmWidth = 15;\r\n  let mmHeight = 15;\r\n  function miniMapString() {\r\n    if (playwidth < playheight) {\r\n      mmWidth = playwidth / 5;\r\n      mmHeight = playheight / 3;\r\n    } else {\r\n      mmWidth = playwidth / 5;\r\n      mmHeight = playwidth / 5;\r\n    }\r\n\r\n    let stringy = "";\r\n    for (let y = mobiles[player.myIndex].y + (mmHeight * 8); y > mobiles[player.myIndex].y - (mmHeight * 8); y -= 8) {\r\n      for (let x = mobiles[player.myIndex].x - (mmWidth * 8); x < mobiles[player.myIndex].x + (mmWidth * 8); x += 8) {\r\n        if (Math.floor(noiseValueFromCoord(x, y)) > 0) {\r\n          stringy += levels[Math.min(parseInt(noiseValueFromCoord(x, y)), levels.length - 1)];\r\n        } else {\r\n          stringy += "gg";\r\n        }\r\n      }\r\n      stringy += "\\n";\r\n    }\r\n    return stringy;\r\n  }\r\n  function miniMap2String() {\r\n    let stringy = "";\r\n    for (let y = mobiles[player.myIndex].y + mmHeight; y > mobiles[player.myIndex].y - mmHeight; y--) {\r\n      for (let x = mobiles[player.myIndex].x - mmWidth; x < mobiles[player.myIndex].x + mmWidth; x++) {\r\n        if (statics.has(Math.round(x) + "," + Math.round(y))) {\r\n          stringy += "qq";\r\n        } else {\r\n          stringy += "gg";\r\n        }\r\n      }\r\n      stringy += "\\n";\r\n    }\r\n    return stringy;\r\n  }\r\n\r\n  let water2 = false;\r\n  let waterTimer = 0;\r\n  let jump = false;\r\n  let jumpTimer = 0;\r\n\r\n  function updateTime() {\r\n\r\n    let coordShower = document.getElementById("afterward");\r\n    let coords = "" + playx + ", " + playy;\r\n\r\n    coordShower.innerText = coords;\r\n\r\n    var currentTime = new Date();\r\n    var firsttime = currentTime.getTime();\r\n\r\n    var smallstep = 10;\r\n    mobiles[player.myIndex].x = parseInt(playx) + parseInt(playwidth / 2) + parseInt(mobiles[player.myIndex].width / 5);\r\n    mobiles[player.myIndex].y = parseInt(playy) + parseInt(playheight / 2) - (mobiles[player.myIndex].height);\r\n    while (deltaTime > smallstep) {\r\n      deltaTime -= smallstep;\r\n    }\r\n\r\n    if (waterTimer > 100) {\r\n      waterTimer = 0;\r\n      water2 = !water2;\r\n    } else {\r\n      waterTimer += deltaTime;\r\n    }\r\n    if (water2) {\r\n      levels[0] = "gx";\r\n    } else {\r\n      levels[0] = "xg";\r\n    }\r\n\r\n    if (jump) {\r\n      jumpTimer += deltaTime;\r\n      mobiles[player.myIndex].elevation += Math.round((50 - jumpTimer) / 25);\r\n      if (jumpTimer > 1 && mobiles[player.myIndex].elevation <= 0) {\r\n        jump = false;\r\n        jumpTimer = 0;\r\n        mobiles[player.myIndex].elevation = 0;\r\n        if (mobiles[player.myIndex].isWalking) {\r\n          switch (mobiles[player.myIndex].direction) {\r\n          case 0:\r\n            key = "w";\r\n            break;\r\n          case 1:\r\n            key = "a";\r\n            break;\r\n          case 2:\r\n            key = "s";\r\n            break;\r\n          case 3:\r\n            key = "d";\r\n            break;\r\n          default:\r\n            break;\r\n          }\r\n        } else {\r\n          key = "";\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isMyTouchDown) {\r\n      playx += parseInt(xdifferential);\r\n      playy -= parseInt(ydifferential);\r\n      if (Math.abs(ydifferential) > Math.abs(xdifferential)) {\r\n        if (ydifferential > 0) {\r\n          mobiles[player.myIndex].direction = 2;\r\n          mobiles[player.myIndex].isWalking = true;\r\n        } else\r\n        if (ydifferential < 0) {\r\n          mobiles[player.myIndex].direction = 0;\r\n          mobiles[player.myIndex].isWalking = true;\r\n        }\r\n      } else {\r\n        if (xdifferential < 0) {\r\n          mobiles[player.myIndex].direction = 1;\r\n          mobiles[player.myIndex].isWalking = true;\r\n        } else\r\n        if (xdifferential > 0) {\r\n          mobiles[player.myIndex].direction = 3;\r\n          mobiles[player.myIndex].isWalking = true;\r\n        }\r\n      }\r\n    } else {\r\n      if (key === "null") {\r\n        mobiles[player.myIndex].isWalking = false;\r\n      }\r\n    }\r\n\r\n    document.getElementById(\'time_span\').textContent = "" + stringBuild();\r\n    document.getElementById(\'miniMap\').textContent = "" + miniMapString();\r\n    document.getElementById(\'miniMap2\').textContent = "" + miniMap2String();\r\n\r\n    if ((document.activeElement).getAttribute("type") != "text") {\r\n      if (key != "null") {\r\n        switch (key) {\r\n        case "ArrowDown": case "s": case "S":\r\n          playy -= 1;\r\n          mobiles[player.myIndex].direction = 2;\r\n          mobiles[player.myIndex].isWalking = true;\r\n          break;\r\n        case "ArrowUp": case "w": case "W":\r\n          playy += 1;\r\n          mobiles[player.myIndex].direction = 0;\r\n          mobiles[player.myIndex].isWalking = true;\r\n          break;\r\n        case "ArrowLeft": case "a": case "A":\r\n          playx -= 1;\r\n          mobiles[player.myIndex].direction = 1;\r\n          mobiles[player.myIndex].isWalking = true;\r\n          break;\r\n        case "ArrowRight": case "d": case "D":\r\n          playx += 1;\r\n          mobiles[player.myIndex].direction = 3;\r\n          mobiles[player.myIndex].isWalking = true;\r\n          break;\r\n        case "Space": case " ":\r\n          jump = true;\r\n          if (mobiles[player.myIndex].isWalking) {\r\n            switch (mobiles[player.myIndex].direction) {\r\n            case 0:\r\n              playy += 1;\r\n              break;\r\n            case 1:\r\n              playx -= 1;\r\n              break;\r\n            case 2:\r\n              playy -= 1;\r\n              break;\r\n            case 3:\r\n              playx += 1;\r\n              break;\r\n            default:\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          mobiles[player.myIndex].isWalking = false;\r\n          key = "null";\r\n        }\r\n      }\r\n    }\r\n    currentTime = new Date();\r\n    let time = currentTime.getTime();\r\n\r\n    deltaTime += time - firsttime;\r\n  }\r\n\r\n\r\n  let key = "";\r\n\r\n  let currTouchX = 0;\r\n  let currTouchY = 0;\r\n\r\n  window.addEventListener("touchstart", touchStartMethod, true);\r\n\r\n  function touchStartMethod(event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < event.touches.length; i++) {\r\n      currTouchX = event.touches[i].pageX;\r\n      currTouchY = event.touches[i].pageY;\r\n\r\n    }\r\n    isMyTouchDown = true;\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  let isMyTouchDown = false;\r\n  window.addEventListener("touchend", touchEndMethod, true);\r\n\r\n  function touchEndMethod(event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    isMyTouchDown = false;\r\n\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  let ydifferential = 0;\r\n  let xdifferential = 0;\r\n\r\n  window.addEventListener("touchmove", touchMoveMethod, true);\r\n\r\n  function touchMoveMethod(event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      xdifferential = parseInt(Math.min(Math.max((event.changedTouches[i].pageX - currTouchX) / 16, -1), 1));\r\n      ydifferential = parseInt(Math.min(Math.max((event.changedTouches[i].pageY - currTouchY) / 16, -1), 1));\r\n      if (currTouchY > event.changedTouches[i].pageY) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  let color1 = document.getElementById("foreColor");\r\n  let color2 = document.getElementById("backColor");\r\n  color1.oninput = setUserColor;\r\n  color2.oninput = setUserColor;\r\n\r\n  function setUserColor() {\r\n    let html = document.querySelector("html");\r\n    let color1 = document.getElementById("foreColor").value;\r\n    let color2 = document.getElementById("backColor").value;\r\n\r\n    if (color1 != "#000000") {\r\n      html.style.color = color1;\r\n    }\r\n    html.style.backgroundColor = color2;\r\n\r\n  }\r\n\r\n  let terminal = document.querySelector(".terminal");\r\n  let form = document.querySelector("form");\r\n\r\n  form.onsubmit = function (event) {\r\n    event.preventDefault();\r\n    let text = document.getElementById("inputText").value;\r\n    let msg = document.createElement("p");\r\n    msg.textContent = text;\r\n    msg.setAttribute("id", "chatmsg");\r\n    terminal.appendChild(msg);\r\n    form.reset();\r\n  };\r\n\r\n  function removeChatMsg() {\r\n    if (document.querySelector("#chatmsg") != null) {\r\n      terminal.removeChild(document.querySelector("#chatmsg"));\r\n    }\r\n  }\r\n\r\n  window.addEventListener("keydown", function (event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    key = event.key;\r\n\r\n    if ((document.activeElement).getAttribute("type") != "text") {\r\n      event.preventDefault();\r\n    }\r\n  }, true);\r\n\r\n  let deltaTimes = 0;\r\n  let amtToAverage = 50;\r\n  for (let i = 0; i < amtToAverage; i++) {\r\n    updateTime();\r\n    deltaTimes += deltaTime;\r\n  }\r\n  deltaTime = deltaTimes / amtToAverage;\r\n\r\n  setInterval(updateTime, 30);\r\n\r\n  setInterval(removeChatMsg, 10000);\r\n};\r\n\r\nfunction makeTree() {\r\n  let intString = [];\r\n  let width = 26;\r\n  let height = 14;\r\n  let amplitudeX = 3;\r\n  for (let j = 0; j < width; j++) {\r\n    for (let i = 0; i < height; i++) {\r\n      intString.push(0);\r\n    }\r\n  }\r\n  let initialSpot = {\r\n    x: parseInt(width / 2),\r\n    y: height - 1\r\n  };\r\n  let initialDirection = {\r\n    x: (Math.random() - 0.5),\r\n    y: 1\r\n  };\r\n  let trunkheight = Math.min(Math.random() * 10, 5);\r\n  let nextSpot = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  for (let i = 0; i < trunkheight; i++) {\r\n    intString[(parseInt(initialSpot.y) * width) + parseInt(initialSpot.x)] = 1;\r\n    initialSpot.x += initialDirection.x;\r\n    initialSpot.y -= initialDirection.y;\r\n    nextSpot.x = initialSpot.x;\r\n    nextSpot.y = initialSpot.y;\r\n  }\r\n  let nextSpots = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    let branchlength = Math.min(Math.random() * 5, 3);\r\n    let nextSpot2 = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n    let newDirection = {\r\n      x: (Math.random() - 0.5) * amplitudeX,\r\n      y: 1\r\n    };\r\n    for (let b = 0; b < branchlength; b++) {\r\n      intString[(parseInt(nextSpot.y) * width) + parseInt(nextSpot.x)] = 1;\r\n      nextSpot.x += newDirection.x;\r\n      nextSpot.y -= newDirection.y;\r\n      nextSpot2.x = initialSpot.x;\r\n      nextSpot2.y = initialSpot.y;\r\n    }\r\n    nextSpots.push(nextSpot2);\r\n  }\r\n  let nextSpotsClone = [...nextSpots];\r\n  let leafspots = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let t = 0; t < 3; t++) {\r\n      let finlength = Math.min(Math.random() * 5, 3);\r\n      let newDirection = {\r\n        x: (Math.random() - 0.5) * amplitudeX,\r\n        y: 1\r\n      };\r\n      let endOfThisBranch = {\r\n        x: 0,\r\n        y: 0\r\n      };\r\n      for (let b = 0; b < finlength; b++) {\r\n        intString[(parseInt(nextSpots[i].y) * width) + parseInt(nextSpots[i].x)] = 1;\r\n        nextSpots[i].x += newDirection.x;\r\n        nextSpots[i].y -= newDirection.y;\r\n        endOfThisBranch.x = nextSpots[i].x;\r\n        endOfThisBranch.y = nextSpots[i].y;\r\n      }\r\n      leafspots.push(endOfThisBranch);\r\n    }\r\n    nextSpots = [...nextSpotsClone];\r\n  }\r\n  for (let i of leafspots) {\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x)] = 3;\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x - 1)] = 3;\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x + 1)] = 3;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x - 1)] = 2;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x + 1)] = 2;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x - 2)] = 2;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x + 2)] = 2;\r\n  }\r\n  let string = "";\r\n  for (let j = 0; j < height; j++) {\r\n    for (let i = 0; i < width; i++) {\r\n      if (intString[(j * width) + i] === 0) {\r\n        string += "0";\r\n      }\r\n      if (intString[(j * width) + i] === 1) {\r\n        string += "a";\r\n      }\r\n      if (intString[(j * width) + i] === 2) {\r\n        string += "t";\r\n      }\r\n      if (intString[(j * width) + i] === 3) {\r\n        string += "j";\r\n      }\r\n    }\r\n  }\r\n  return string;\r\n}\r\n\r\nfunction makeBigTree() {\r\n  let intString = [];\r\n  let width = 25;\r\n  let height = 25;\r\n  let amplitudeX = 3;\r\n  for (let j = 0; j < width; j++) {\r\n    for (let i = 0; i < height; i++) {\r\n      intString.push(0);\r\n    }\r\n  }\r\n  let initialSpot = {\r\n    x: parseInt(width / 2),\r\n    y: height - 1\r\n  };\r\n  let initialDirection = {\r\n    x: (Math.random() - 0.5),\r\n    y: 1\r\n  };\r\n  let trunkheight = Math.min(Math.random() * 12, 5);\r\n  let nextSpot = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  for (let i = 0; i < trunkheight; i++) {\r\n    intString[(parseInt(initialSpot.y) * width) + parseInt(initialSpot.x)] = 1;\r\n    initialSpot.x += initialDirection.x;\r\n    initialSpot.y -= initialDirection.y;\r\n    nextSpot.x = initialSpot.x;\r\n    nextSpot.y = initialSpot.y;\r\n  }\r\n  let nextSpots = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    let branchlength = Math.min(Math.random() * 8, 6);\r\n    let nextSpot2 = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n    let newDirection = {\r\n      x: (Math.random() - 0.5) * amplitudeX,\r\n      y: 1\r\n    };\r\n    for (let b = 0; b < branchlength; b++) {\r\n      intString[(parseInt(nextSpot.y) * width) + parseInt(nextSpot.x)] = 1;\r\n      nextSpot.x += newDirection.x;\r\n      nextSpot.y -= newDirection.y;\r\n      nextSpot2.x = initialSpot.x;\r\n      nextSpot2.y = initialSpot.y;\r\n    }\r\n    nextSpots.push(nextSpot2);\r\n  }\r\n  let nextSpotsClone = [...nextSpots];\r\n  let leafspots = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let t = 0; t < 3; t++) {\r\n      let finlength = Math.min(Math.random() * 8, 6);\r\n      let newDirection = {\r\n        x: (Math.random() - 0.5) * amplitudeX,\r\n        y: 1\r\n      };\r\n      let endOfThisBranch = {\r\n        x: 0,\r\n        y: 0\r\n      };\r\n      for (let b = 0; b < finlength; b++) {\r\n        intString[(parseInt(nextSpots[i].y) * width) + parseInt(nextSpots[i].x)] = 1;\r\n        nextSpots[i].x += newDirection.x;\r\n        nextSpots[i].y -= newDirection.y;\r\n        endOfThisBranch.x = nextSpots[i].x;\r\n        endOfThisBranch.y = nextSpots[i].y;\r\n      }\r\n      leafspots.push(endOfThisBranch);\r\n    }\r\n    nextSpots = [...nextSpotsClone];\r\n  }\r\n  for (let i of leafspots) {\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x)] = 2;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x)] = 2;\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x - 1)] = 2;\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x + 1)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x - 1)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x + 1)] = 2;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x - 1)] = 3;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x + 1)] = 3;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x - 2)] = 3;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x + 2)] = 3;\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x - 2)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x + 2)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x - 2)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x + 2)] = 2;\r\n    intString[(parseInt(i.y - 1) * width) + parseInt(i.x - 1)] = 3;\r\n    intString[(parseInt(i.y - 1) * width) + parseInt(i.x)] = 3;\r\n    intString[(parseInt(i.y - 1) * width) + parseInt(i.x + 1)] = 3;\r\n  }\r\n  let string = "";\r\n  for (let j = 0; j < height; j++) {\r\n    for (let i = 0; i < width; i++) {\r\n      if (intString[(j * width) + i] === 0) {\r\n        string += "0";\r\n      }\r\n      if (intString[(j * width) + i] === 1) {\r\n        string += "a";\r\n      }\r\n      if (intString[(j * width) + i] === 2) {\r\n        string += "n";\r\n      }\r\n      if (intString[(j * width) + i] === 3) {\r\n        string += "j";\r\n      }\r\n    }\r\n  }\r\n  return string;\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')}]);