!function(I){var g={};function n(c){if(g[c])return g[c].exports;var l=g[c]={i:c,l:!1,exports:{}};return I[c].call(l.exports,l,l.exports,n),l.l=!0,l.exports}n.m=I,n.c=g,n.d=function(I,g,c){n.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:c})},n.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},n.t=function(I,g){if(1&g&&(I=n(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var c=Object.create(null);if(n.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var l in I)n.d(c,l,function(g){return I[g]}.bind(null,l));return c},n.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return n.d(g,"a",g),g},n.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},n.p="",n(n.s=4)}([function(module,exports,__webpack_require__){eval("var api = __webpack_require__(1);\n            var content = __webpack_require__(2);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3N0eWxlcy5jc3M/OTlhMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxVQUFVLG1CQUFPLENBQUMsQ0FBMkU7QUFDN0YsMEJBQTBCLG1CQUFPLENBQUMsQ0FBMEQ7O0FBRTVGOztBQUVBO0FBQ0EsMEJBQTBCLFFBQVM7QUFDbkM7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7OztBQUlBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, "html {\\r\\n  color:rgb(181, 171, 171);\\r\\n  background-color:rgb(0, 0, 0);\\r\\n  text-align:center;\\r\\n  font-family:JacksonFont;\\r\\n  font-weight:700%;\\r\\n  user-select:none;\\r\\n  height: 100%;\\r\\n  overflow: hidden;\\r\\n  width: 100%;\\r\\n  position: fixed;\\r\\n  touch-action: none;\\r\\n  overscroll-behavior-y: contain;\\r\\n  white-space: pre;\\r\\n  font-size:90%;\\r\\n  line-height:10px;\\r\\n  transform: scaleY(2) translateY(20%);\\r\\n  z-index:-1;\\r\\n  \\r\\n}\\r\\n\\r\\n@media screen and (max-width: 1000) {\\r\\n  #subcontainer {\\r\\n    transform:translateY(180px);\\r\\n  }\\r\\n  \\r\\n}\\r\\n\\r\\n#subcontainer {\\r\\n  display:flex;\\r\\n  flex-direction:column;\\r\\n  align-items: flex-start;\\r\\n}\\r\\n\\r\\n#container {\\r\\n  display:flex;\\r\\n  justify-content: flex-start;\\r\\n}\\r\\n\\r\\n#time-span {\\r\\n  float:left;\\r\\n}\\r\\n\\r\\n#miniMap2 {\\r\\n  font-size:10%;\\r\\n  line-height:5px;\\r\\n  text-align:left;\\r\\n\\r\\n\\r\\n  z-index:0;\\r\\n}\\r\\n#miniMap {\\r\\n  font-size:10%;\\r\\n  line-height:5px;\\r\\n  text-align:left;\\r\\n\\r\\n\\r\\n  z-index:0;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n.terminal {\\r\\n  display:flex;\\r\\n  flex-direction: column;\\r\\n  justify-content: flex-start;\\r\\n  align-items: flex-start;\\r\\n  line-height: 19px;\\r\\n}\\r\\n\\r\\n#screenAndOverlay {\\r\\n  display:flex;\\r\\n  flex-direction: column;\\r\\n  align-items: flex-start;\\r\\n}\\r\\n\\r\\n#overlay {\\r\\n  font-family:monospace;\\r\\n  transform:scaleY(.5) translateX(45px) translateY(-210%);\\r\\n  font-size:140%;\\r\\n  font-weight:bold;\\r\\n  display:flex;\\r\\n  flex-direction:column;\\r\\n  align-items:flex-start;\\r\\n}\\r\\n\\r\\n#overlay p {\\r\\n  margin-top: 1px;\\r\\n  margin-bottom: 1px;\\r\\n}\\r\\n\\r\\n.terminal p {\\r\\n  margin: 0 10%;\\r\\n}\\r\\n\\r\\n.inputSpot {\\r\\n  height:30px;\\r\\n  margin:0 10%;\\r\\n  width:100%;\\r\\n}\\r\\n\\r\\n#inputText {\\r\\n  background-color: transparent; \\r\\n  border: 0px; \\r\\n  outline: none; \\r\\n  -webkit-box-shadow: none; \\r\\n  -moz-box-shadow: none; \\r\\n  box-shadow: none; \\r\\n  width:100%; \\r\\n  color:white; \\r\\n}\\r\\n\\r\\n#afterward {\\r\\n  margin:0 10%;\\r\\n  text-align: left;\\r\\n  user-select:none;\\r\\n  width: 100%;\\r\\n  touch-action: none;\\r\\n  overscroll-behavior-y: contain;\\r\\n  white-space: pre;\\r\\n}\\r\\n\\r\\n.terminal {\\r\\n  margin:0 10%;\\r\\n  position:fixed;\\r\\n  display:flex;\\r\\n  flex-direction: column;\\r\\n  justify-content: flex-start;\\r\\n  align-items: flex-start;\\r\\n  line-height: 19px;\\r\\n  transform: translateY(-75px);\\r\\n\\r\\n}\\r\\n\\r\\n.terminal p {\\r\\n  margin: 0 10%;\\r\\n}\\r\\n\\r\\n.inputSpot {\\r\\n  height:30px;\\r\\n  margin:0 10%;\\r\\n  width:100%;\\r\\n\\r\\n}\\r\\n\\r\\n#inputText {\\r\\n  background-color: transparent; \\r\\n  border: 0px; \\r\\n  outline: none; \\r\\n  -webkit-box-shadow: none; \\r\\n  -moz-box-shadow: none; \\r\\n  box-shadow: none; \\r\\n  width:100%; \\r\\n  color:white; \\r\\n}\\r\\n\\r\\n#afterward {\\r\\n  margin:0 10%;\\r\\n  text-align: left;\\r\\n  transform: translateY(-50px);\\r\\n}\\r\\n\\r\\n\\r\\n@font-face {\\r\\n  font-family: \\"JacksonFont\\";\\r\\n  src: url(data:application/x-font-woff;charset=utf-8;base64,) format(\'woff\');\\r\\n}  \\r\\n\\r\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\'; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || \'\').concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n  return "/*# ".concat(data, " */");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRDQUE0QyxxQkFBcUI7QUFDakU7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EscUJBQXFCLGlCQUFpQjtBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLHFCQUFxQjtBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsOEJBQThCOztBQUU5Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxjQUFjO0FBQ25FO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/css/styles.css\nvar styles = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/perlin.js\n//  JAVSCRIPT IMPLEMENTATION OF IMPROVED NOISE   -   COPYRIGHT 2002 KEN PERLIN.\r\n\r\nconst p = new Array(512);\r\nconst permutation = [\r\n  151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140,\r\n  36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234,\r\n  75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237,\r\n  149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48,\r\n  27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105,\r\n  92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73,\r\n  209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86,\r\n  164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38,\r\n  147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189,\r\n  28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101,\r\n  155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\r\n  178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12,\r\n  191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,\r\n  181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\r\n  138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215,\r\n  61, 156, 180,\r\n];\r\n\r\nfor (let i = 0; i < 256; i++) {\r\n  p[256 + i] = p[i] = permutation[i];\r\n}\r\n\r\nconst fade = (t) => {\r\n  return t * t * t * (t * (t * 6 - 15) + 10);\r\n};\r\n\r\nconst lerp = (t, a, b) => {\r\n  return a + t * (b - a);\r\n};\r\n\r\nconst grad = (hash, x, y, z) => {\r\n  const h = hash & 15;\r\n  const u = h < 8 ? x : y,\r\n    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\r\n  return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\r\n};\r\n\r\nclass ImprovedNoise {\r\n  static noise(x, y, z) {\r\n    const X = Math.floor(x) & 255,\r\n      Y = Math.floor(y) & 255,\r\n      Z = Math.floor(z) & 255;\r\n    x -= Math.floor(x);\r\n    y -= Math.floor(y);\r\n    z -= Math.floor(z);\r\n    const u = fade(x),\r\n      v = fade(y),\r\n      w = fade(z);\r\n    const A = p[X] + Y,\r\n      AA = p[A] + Z,\r\n      AB = p[A + 1] + Z,\r\n      B = p[X + 1] + Y,\r\n      BA = p[B] + Z,\r\n      BB = p[B + 1] + Z;\r\n\r\n    return lerp(\r\n      w,\r\n      lerp(\r\n        v,\r\n        lerp(u, grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z)),\r\n        lerp(u, grad(p[AB], x, y - 1, z), grad(p[BB], x - 1, y - 1, z))\r\n      ),\r\n      lerp(\r\n        v,\r\n        lerp(u, grad(p[AA + 1], x, y, z - 1), grad(p[BA + 1], x - 1, y, z - 1)),\r\n        lerp(\r\n          u,\r\n          grad(p[AB + 1], x, y - 1, z - 1),\r\n          grad(p[BB + 1], x - 1, y - 1, z - 1)\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n// END OF IMPROVED NOISE\n// CONCATENATED MODULE: ./src/script.js\n\r\n\r\n\r\nonload = function () {\r\n  let levels = new Array(\r\n    "gg",\r\n    "gg",\r\n    "gg",\r\n    "gg",\r\n    "gg",\r\n    "aa",\r\n    "nn",\r\n    "rr",\r\n    "pp",\r\n    "ss",\r\n    "oo",\r\n    "qq",\r\n  );\r\n\r\n  let deltaTime = 0;\r\n\r\n\r\n  let playx = 0.0;\r\n  let playy = 0.0;\r\n\r\n  let mobSkins = [];\r\n\r\n  const defaultSkin = [\r\n    "qqggqq" +\r\n    "ggqqgg" +\r\n    "qqggqq" +\r\n    "ggoogg" +\r\n    "ooggoo",\r\n\r\n    "qqgggg" +\r\n    "xxqqgg" +\r\n    "ggooqq" +\r\n    "yyyyyy" +\r\n    "ooggoo",\r\n\r\n    "ggqqgg" +\r\n    "xxooxx" +\r\n    "ggqqgg" +\r\n    "yyooyy" +\r\n    "ooggoo",\r\n\r\n    "ggggqq" +\r\n    "ggqqxx" +\r\n    "qqoogg" +\r\n    "yyyyyy" +\r\n    "ooggoo"\r\n  ];\r\n  const ginkSkin =\r\n    [\r\n      "pppppppppppppp" +\r\n      "ppppqqqqqqpppp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "ppqqppqqqqqqpp" +\r\n      "pppppppppppppp",\r\n\r\n      "pppppppppppppp" +\r\n      "ppppqqqqqqpppp" +\r\n      "ppggaaqqqqqqpp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "aaaaqqqqqqqqpp" +\r\n      "ppqqppqqqqqqpp" +\r\n      "pppppppppppppp",\r\n\r\n      "pppppppppppppp" +\r\n      "ppppqqqqqqpppp" +\r\n      "ppaaggqqggaapp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "ppqqaaaaaaqqpp" +\r\n      "ppqqppqqqqqqpp" +\r\n      "pppppppppppppp",\r\n\r\n      "pppppppppppppp" +\r\n      "ppppqqqqqqpppp" +\r\n      "ppqqqqqqaaggpp" +\r\n      "ppqqqqqqqqqqpp" +\r\n      "ppqqqqqqqqaaaa" +\r\n      "ppqqppqqqqqqpp" +\r\n      "pppppppppppppp",\r\n    ];\r\n\r\n  mobSkins.push(defaultSkin);\r\n  mobSkins.push(ginkSkin);\r\n\r\n  let mobiles = [];\r\n  let statics = new Map();\r\n\r\n  for (let i = 0; i < 1300; i++) {\r\n    let x = (Math.random() * 2000) - 1000;\r\n    let y = (Math.random() * 2000) - 1000;\r\n    let rock = {\r\n      x: x,\r\n      y: y,\r\n      width: 8,\r\n      height: 4,\r\n      thing:\r\n        "000qqo00" +\r\n        "0oqqqoo0" +\r\n        "aooqqqoo" +\r\n        "gaaoooqo"\r\n    };\r\n    statics.set(parseInt(x) + "," + parseInt(y), rock);\r\n  }\r\n\r\n  for (let i = 0; i < 2000; i++) {\r\n    let x = (Math.random() * 2000) - 1000;\r\n    let y = (Math.random() * 2000) - 1000;\r\n    let tree = {\r\n      x: x,\r\n      y: y,\r\n      width: 26,\r\n      height: 14,\r\n      thing: makeTree()\r\n    };\r\n    statics.set(parseInt(x) + "," + parseInt(y), tree);\r\n  }\r\n\r\n  for (let i = 0; i < 3000; i++) {\r\n    let x = (Math.random() * 2000) - 1000;\r\n    let y = (Math.random() * 2000) - 1000;\r\n    let tree = {\r\n      x: x,\r\n      y: y,\r\n      width: 25,\r\n      height: 25,\r\n      thing: makeBigTree()\r\n    };\r\n    statics.set(parseInt(x) + "," + parseInt(y), tree);\r\n  }\r\n\r\n  for (let i = 0; i < 2000; i++) {\r\n    let x = (Math.random() * 2000) + 1000;\r\n    let y = (Math.random() * 2000) + 500;\r\n    let tree = {\r\n      x: x,\r\n      y: y,\r\n      width: 26,\r\n      height: 14,\r\n      thing: makeTree()\r\n    };\r\n    statics.set(parseInt(x) + "," + parseInt(y), tree);\r\n  }\r\n\r\n  for (let i = 0; i < 3000; i++) {\r\n    let x = (Math.random() * 2000) + 7000;\r\n    let y = (Math.random() * 2000) + 750;\r\n    let tree = {\r\n      x: x,\r\n      y: y,\r\n      width: 25,\r\n      height: 25,\r\n      thing: makeBigTree()\r\n    };\r\n    statics.set(parseInt(x) + "," + parseInt(y), tree);\r\n  }\r\n\r\n\r\n  let player = {\r\n    x: 0,\r\n    y: 0,\r\n    myIndex: mobiles.length,\r\n    direction: 0,\r\n    foottimer: 0.0,\r\n    isWalking: false,\r\n    leftfoot: false,\r\n    id: 0,\r\n    width: 3,\r\n    height: 5,\r\n    elevation: 0\r\n  };\r\n  mobiles.push(player);\r\n\r\n  let player2 = {\r\n    x: 0,\r\n    y: 0,\r\n    myIndex: mobiles.length,\r\n    direction: 3,\r\n    foottimer: 0.0,\r\n    isWalking: false,\r\n    leftfoot: false,\r\n    id: 1,\r\n    width: 7,\r\n    height: 7,\r\n    elevation: 0\r\n  };\r\n  mobiles.push(player2);\r\n\r\n  let player3 = {\r\n    x: 14,\r\n    y: 6,\r\n    myIndex: mobiles.length,\r\n    direction: 2,\r\n    foottimer: 0.0,\r\n    isWalking: false,\r\n    leftfoot: false,\r\n    id: 1,\r\n    width: 7,\r\n    height: 7,\r\n    elevation: 0\r\n  };\r\n  mobiles.push(player3);\r\n\r\n  let playheight = window.innerHeight / 24;\r\n  let playwidth = window.innerWidth / 18;\r\n  let statOverscan = 20;\r\n\r\n  function noiseValueFromCoord(i, j, scale, offset) {\r\n    let heel2 = ImprovedNoise.noise(parseFloat((i) / 5.1), parseFloat(j) / 5.1, 7.2) * 2;\r\n    let heel1 = ImprovedNoise.noise(parseFloat((i) / 300.1), parseFloat(j) / 300.1, 7.2) * levels.length + 2;\r\n    let heel = parseInt((ImprovedNoise.noise(parseFloat((i) / 50.1), parseFloat(j) / 50.1, 10.2) * levels.length + 2) + parseFloat(heel1) + parseFloat(heel2));\r\n    if (scale != null && offset === null) {\r\n      return heel * scale;\r\n    } else\r\n    if (scale != null && offset != null) {\r\n      return (heel + offset) * scale;\r\n    } else {\r\n      return heel;\r\n    }\r\n  }\r\n\r\n  function isWater(x, y) {\r\n    return (noiseValueFromCoord(parseInt(x), parseInt(y)) < 1);\r\n  }\r\n  let mobSpots = new Map();\r\n  let statSpots = new Map();\r\n  let overSpots = new Map();\r\n  function stringBuild() {\r\n    playheight = window.innerHeight / 24;\r\n    playwidth = window.innerWidth / 24;\r\n    var theString = "";\r\n    mobSpots = new Map();\r\n    statSpots = new Map();\r\n    overSpots = new Map();\r\n    for (let j = playheight + statOverscan; j > 0; j--) {\r\n      for (let i = -statOverscan; i < playwidth + statOverscan; i += 19) {\r\n        theString += oneCharStringBuild(i, j);\r\n        theString += oneCharStringBuild(i + 1, j);\r\n        theString += oneCharStringBuild(i + 2, j);\r\n        theString += oneCharStringBuild(i + 3, j);\r\n        theString += oneCharStringBuild(i + 4, j);\r\n        theString += oneCharStringBuild(i + 5, j);\r\n        theString += oneCharStringBuild(i + 6, j);\r\n        theString += oneCharStringBuild(i + 7, j);\r\n        theString += oneCharStringBuild(i + 8, j);\r\n        theString += oneCharStringBuild(i + 9, j);\r\n        theString += oneCharStringBuild(i + 10, j);\r\n        theString += oneCharStringBuild(i + 11, j);\r\n        theString += oneCharStringBuild(i + 12, j);\r\n        theString += oneCharStringBuild(i + 13, j);\r\n        theString += oneCharStringBuild(i + 14, j);\r\n        theString += oneCharStringBuild(i + 15, j);\r\n        theString += oneCharStringBuild(i + 16, j);\r\n        theString += oneCharStringBuild(i + 17, j);\r\n        theString += oneCharStringBuild(i + 18, j);\r\n      }\r\n      if (j < playheight) {\r\n        theString += "\\n";\r\n      }\r\n    }\r\n    return theString;\r\n  }\r\n\r\n  let miniMapX = 3;\r\n  let miniMapWidth = 11;\r\n  let miniMapY = miniMapWidth + 2;\r\n  function oneCharStringBuild(i, j) {\r\n    let theString = "";\r\n    let iterationX = i + playx;\r\n    let iterationY = j + playy;\r\n    let heel = noiseValueFromCoord(i + playx, j + playy);\r\n    let isMob = false;\r\n    let isStat = false;\r\n    let coordChar = parseInt(iterationX) + "," + parseInt(iterationY);\r\n\r\n    if (parseInt(i) === miniMapX && parseInt(j) === miniMapY) {\r\n      for (let m = miniMapWidth; m > 0; m--) {\r\n        for (let n = 0; n < miniMapWidth; n++) {\r\n          let mmSpot = parseInt(iterationX + n) + "," + parseInt(iterationY - m);\r\n\r\n          let overPix;\r\n          if (m === miniMapWidth || m === 1) {\r\n            overPix = {\r\n              brick: "yy"\r\n            };\r\n            if (!overSpots.has(mmSpot)) {\r\n              overSpots.set(mmSpot, overPix);\r\n            }\r\n          } else {\r\n            overPix = {\r\n              brick: "gg"\r\n\r\n            };\r\n            if (!overSpots.has(mmSpot)) {\r\n              overSpots.set(mmSpot, overPix);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n\r\n      if (statics.has(coordChar)) {\r\n        let stat = statics.get(coordChar);\r\n        let statWidth = stat.width;\r\n        let statHeight = stat.height;\r\n        for (let t = 0; t < statHeight; t++) {\r\n          for (let c = 0; c < statWidth; c++) {\r\n            let charOfTheStat = stat.thing.charAt((t * statWidth) + c);\r\n            if (charOfTheStat != "0") {\r\n              var statPixel = {\r\n                x: parseInt(iterationX) + c,\r\n                y: parseInt(iterationY) - t,\r\n                brick: "" + charOfTheStat + charOfTheStat,\r\n                statX: iterationX,\r\n                statY: iterationY,\r\n                sHeight: statHeight\r\n              };\r\n              if (!statSpots.has(parseInt(iterationX + c) + "," + parseInt(iterationY - t))) {\r\n                statSpots.set(parseInt(iterationX + c) + "," + parseInt(iterationY - t), statPixel);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      }\r\n    }\r\n    for (let a = 0; a < mobiles.length; a++) {\r\n      let mobY = ((isWater(mobiles[a].x, mobiles[a].y)) ? Math.min(Math.floor(mobiles[a].y + noiseValueFromCoord(mobiles[a].x, mobiles[a].y, 1, 0)), mobiles[a].y) : (mobiles[a].y + noiseValueFromCoord(mobiles[a].x, mobiles[a].y, .5, 0))) + mobiles[a].height + mobiles[a].elevation;\r\n      let mobX = mobiles[a].x - Math.floor(mobiles[a].width / 2);\r\n      if (parseInt(mobX) === parseInt(iterationX) && parseInt(mobY) === parseInt(iterationY)) {\r\n        let mobID = mobiles[a].id;\r\n        let mobWidth = mobiles[a].width;\r\n        let isInWater = isWater(mobiles[a].x, mobiles[a].y);\r\n        let mobHeight = (isInWater) ? Math.floor(Math.min(mobiles[a].height + (noiseValueFromCoord(mobiles[a].x, mobiles[a].y, 1, -1)), mobiles[a].height)) : mobiles[a].height;\r\n\r\n        if (mobiles[a].isWalking) {\r\n          if (mobiles[a].foottimer > 100) {\r\n            mobiles[a].leftfoot = !mobiles[a].leftfoot;\r\n            mobiles[a].foottimer = 0;\r\n          } else {\r\n            mobiles[a].foottimer += deltaTime * 5;\r\n          }\r\n        }\r\n        for (let m = 0; m < mobHeight; m++) {\r\n          for (let o = 0; o < mobWidth; o++) {\r\n            var mobPixel = {\r\n              x: parseInt(iterationX) + o,\r\n              y: parseInt(iterationY) - m,\r\n              brick: "" + mobSkins[mobID][mobiles[a].direction].charAt((((m * mobWidth) + o) * 2)) + mobSkins[mobID][mobiles[a].direction].charAt((((m * mobWidth) + o) * 2) + 1),\r\n              mobX: iterationX,\r\n              mobY: iterationY\r\n            };\r\n            if (!isInWater) {\r\n              if (o === mobWidth - 1 && m === mobHeight - 1) {\r\n                if (mobiles[a].leftfoot) {\r\n                  mobPixel.brick = "gg";\r\n                }\r\n              }\r\n              if (o === 0 && m === mobHeight - 1) {\r\n                if (!mobiles[a].leftfoot) {\r\n                  mobPixel.brick = "gg";\r\n                }\r\n              }\r\n            }\r\n            if (!mobSpots.has(parseInt(iterationX + o) + "," + parseInt(iterationY - m))) {\r\n              mobSpots.set(parseInt(iterationX + o) + "," + parseInt(iterationY - m), mobPixel);\r\n            }\r\n          }\r\n        }\r\n\r\n      }\r\n    }\r\n    let isOverlay = false;\r\n    let mobPix = {};\r\n    let rightnowbrick = "";\r\n    if (overSpots.has(coordChar)) {\r\n      isOverlay = true;\r\n      rightnowbrick = overSpots.get(coordChar).brick;\r\n    } else {\r\n      if (mobSpots.has(coordChar)) {\r\n        mobPix = mobSpots.get(coordChar);\r\n        rightnowbrick = mobPix.brick;\r\n        isMob = true;\r\n      }\r\n      if (statSpots.has(coordChar)) {\r\n        let statPix = statSpots.get(coordChar);\r\n        if (isMob) {\r\n          if (Object.hasOwn(mobPix, \'mobY\')) {\r\n            if (mobPix.mobY - 5 > statPix.statY - statPix.sHeight) {\r\n              rightnowbrick = statPix.brick;\r\n            }\r\n          }\r\n        } else {\r\n          rightnowbrick = statPix.brick;\r\n        }\r\n        isStat = true;\r\n      }\r\n    }\r\n    if (i > 0 && i < playwidth && j > 0 && j < playheight) {\r\n      if (isMob || isStat || isOverlay) {\r\n        theString = rightnowbrick;\r\n      } else {\r\n        if (heel <= levels.length - 1 && heel > 0) {\r\n          theString = levels[heel];\r\n        } else {\r\n          if (heel > levels.length - 1) {\r\n            theString = levels[levels.length - 1];\r\n          } else {\r\n            let date = new Date();\r\n            if (parseInt(ImprovedNoise.noise(parseFloat(iterationX) / 10, parseFloat(iterationY) / 10, date.getTime() / 10000) * 10) === 0 && parseInt((iterationY * playwidth) + iterationX) % 4 === 0) {\r\n              theString = levels[0];\r\n            } else {\r\n              theString = "gg";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return theString;\r\n  }\r\n\r\n  let mmWidth = 15;\r\n  let mmHeight = 15;\r\n  function miniMapString() {\r\n    if (playwidth < playheight) {\r\n      mmWidth = playwidth / 5;\r\n      mmHeight = playheight / 3;\r\n    } else {\r\n      mmWidth = playwidth / 5;\r\n      mmHeight = playwidth / 5;\r\n    }\r\n\r\n    let stringy = "";\r\n    for (let y = mobiles[player.myIndex].y + (mmHeight * 8); y > mobiles[player.myIndex].y - (mmHeight * 8); y -= 8) {\r\n      for (let x = mobiles[player.myIndex].x - (mmWidth * 8); x < mobiles[player.myIndex].x + (mmWidth * 8); x += 8) {\r\n        if (Math.floor(noiseValueFromCoord(x, y)) > 0) {\r\n          stringy += levels[Math.min(parseInt(noiseValueFromCoord(x, y)), levels.length - 1)];\r\n        } else {\r\n          stringy += "gg";\r\n        }\r\n      }\r\n      stringy += "\\n";\r\n    }\r\n    return stringy;\r\n  }\r\n  function miniMap2String() {\r\n    let stringy = "";\r\n    for (let y = mobiles[player.myIndex].y + mmHeight; y > mobiles[player.myIndex].y - mmHeight; y--) {\r\n      for (let x = mobiles[player.myIndex].x - mmWidth; x < mobiles[player.myIndex].x + mmWidth; x++) {\r\n        if (statics.has(Math.round(x) + "," + Math.round(y))) {\r\n          stringy += "qq";\r\n        } else {\r\n          stringy += "gg";\r\n        }\r\n      }\r\n      stringy += "\\n";\r\n    }\r\n    return stringy;\r\n  }\r\n\r\n  let water2 = false;\r\n  let waterTimer = 0;\r\n  let jump = false;\r\n  let jumpTimer = 0;\r\n\r\n  function updateTime() {\r\n\r\n    let coordShower = document.getElementById("afterward");\r\n    let coords = "" + playx + ", " + playy;\r\n\r\n    coordShower.innerText = coords;\r\n\r\n    var currentTime = new Date();\r\n    var firsttime = currentTime.getTime();\r\n\r\n    var smallstep = 10;\r\n    mobiles[player.myIndex].x = parseInt(playx) + parseInt(playwidth / 2) + parseInt(mobiles[player.myIndex].width / 5);\r\n    mobiles[player.myIndex].y = parseInt(playy) + parseInt(playheight / 2) - (mobiles[player.myIndex].height);\r\n    while (deltaTime > smallstep) {\r\n      deltaTime -= smallstep;\r\n    }\r\n\r\n    if (waterTimer > 100) {\r\n      waterTimer = 0;\r\n      water2 = !water2;\r\n    } else {\r\n      waterTimer += deltaTime;\r\n    }\r\n    if (water2) {\r\n      levels[0] = "gx";\r\n    } else {\r\n      levels[0] = "xg";\r\n    }\r\n\r\n    if (jump) {\r\n      jumpTimer += deltaTime;\r\n      mobiles[player.myIndex].elevation += Math.round((50 - jumpTimer) / 25);\r\n      if (jumpTimer > 1 && mobiles[player.myIndex].elevation <= 0) {\r\n        jump = false;\r\n        jumpTimer = 0;\r\n        mobiles[player.myIndex].elevation = 0;\r\n        if (mobiles[player.myIndex].isWalking) {\r\n          switch (mobiles[player.myIndex].direction) {\r\n          case 0:\r\n            key = "w";\r\n            break;\r\n          case 1:\r\n            key = "a";\r\n            break;\r\n          case 2:\r\n            key = "s";\r\n            break;\r\n          case 3:\r\n            key = "d";\r\n            break;\r\n          default:\r\n            break;\r\n          }\r\n        } else {\r\n          key = "";\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isMyTouchDown) {\r\n      playx += parseInt(xdifferential);\r\n      playy -= parseInt(ydifferential);\r\n      if (Math.abs(ydifferential) > Math.abs(xdifferential)) {\r\n        if (ydifferential > 0) {\r\n          mobiles[player.myIndex].direction = 2;\r\n          mobiles[player.myIndex].isWalking = true;\r\n        } else\r\n        if (ydifferential < 0) {\r\n          mobiles[player.myIndex].direction = 0;\r\n          mobiles[player.myIndex].isWalking = true;\r\n        }\r\n      } else {\r\n        if (xdifferential < 0) {\r\n          mobiles[player.myIndex].direction = 1;\r\n          mobiles[player.myIndex].isWalking = true;\r\n        } else\r\n        if (xdifferential > 0) {\r\n          mobiles[player.myIndex].direction = 3;\r\n          mobiles[player.myIndex].isWalking = true;\r\n        }\r\n      }\r\n    } else {\r\n      if (key === "null") {\r\n        mobiles[player.myIndex].isWalking = false;\r\n      }\r\n    }\r\n\r\n    document.getElementById(\'time_span\').textContent = "" + stringBuild();\r\n    document.getElementById(\'miniMap\').textContent = "" + miniMapString();\r\n    document.getElementById(\'miniMap2\').textContent = "" + miniMap2String();\r\n\r\n    if ((document.activeElement).getAttribute("type") != "text") {\r\n      if (key != "null") {\r\n        switch (key) {\r\n        case "ArrowDown": case "s": case "S":\r\n          playy -= 1;\r\n          mobiles[player.myIndex].direction = 2;\r\n          mobiles[player.myIndex].isWalking = true;\r\n          break;\r\n        case "ArrowUp": case "w": case "W":\r\n          playy += 1;\r\n          mobiles[player.myIndex].direction = 0;\r\n          mobiles[player.myIndex].isWalking = true;\r\n          break;\r\n        case "ArrowLeft": case "a": case "A":\r\n          playx -= 1;\r\n          mobiles[player.myIndex].direction = 1;\r\n          mobiles[player.myIndex].isWalking = true;\r\n          break;\r\n        case "ArrowRight": case "d": case "D":\r\n          playx += 1;\r\n          mobiles[player.myIndex].direction = 3;\r\n          mobiles[player.myIndex].isWalking = true;\r\n          break;\r\n        case "Space": case " ":\r\n          jump = true;\r\n          if (mobiles[player.myIndex].isWalking) {\r\n            switch (mobiles[player.myIndex].direction) {\r\n            case 0:\r\n              playy += 1;\r\n              break;\r\n            case 1:\r\n              playx -= 1;\r\n              break;\r\n            case 2:\r\n              playy -= 1;\r\n              break;\r\n            case 3:\r\n              playx += 1;\r\n              break;\r\n            default:\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          mobiles[player.myIndex].isWalking = false;\r\n          key = "null";\r\n        }\r\n      }\r\n    }\r\n    currentTime = new Date();\r\n    let time = currentTime.getTime();\r\n\r\n    deltaTime += time - firsttime;\r\n  }\r\n\r\n\r\n  let key = "";\r\n\r\n  let currTouchX = 0;\r\n  let currTouchY = 0;\r\n\r\n  window.addEventListener("touchstart", touchStartMethod, true);\r\n\r\n  function touchStartMethod(event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < event.touches.length; i++) {\r\n      currTouchX = event.touches[i].pageX;\r\n      currTouchY = event.touches[i].pageY;\r\n\r\n    }\r\n    isMyTouchDown = true;\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  let isMyTouchDown = false;\r\n  window.addEventListener("touchend", touchEndMethod, true);\r\n\r\n  function touchEndMethod(event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    isMyTouchDown = false;\r\n\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  let ydifferential = 0;\r\n  let xdifferential = 0;\r\n\r\n  window.addEventListener("touchmove", touchMoveMethod, true);\r\n\r\n  function touchMoveMethod(event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      xdifferential = parseInt(Math.min(Math.max((event.changedTouches[i].pageX - currTouchX) / 16, -1), 1));\r\n      ydifferential = parseInt(Math.min(Math.max((event.changedTouches[i].pageY - currTouchY) / 16, -1), 1));\r\n      if (currTouchY > event.changedTouches[i].pageY) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  let color1 = document.getElementById("foreColor");\r\n  let color2 = document.getElementById("backColor");\r\n  color1.oninput = setUserColor;\r\n  color2.oninput = setUserColor;\r\n\r\n  function setUserColor() {\r\n    let html = document.querySelector("html");\r\n    let color1 = document.getElementById("foreColor").value;\r\n    let color2 = document.getElementById("backColor").value;\r\n\r\n    if (color1 != "#000000") {\r\n      html.style.color = color1;\r\n    }\r\n    html.style.backgroundColor = color2;\r\n\r\n  }\r\n\r\n  let terminal = document.querySelector(".terminal");\r\n  let form = document.querySelector("form");\r\n\r\n  form.onsubmit = function (event) {\r\n    event.preventDefault();\r\n    let text = document.getElementById("inputText").value;\r\n    let msg = document.createElement("p");\r\n    msg.textContent = text;\r\n    msg.setAttribute("id", "chatmsg");\r\n    terminal.appendChild(msg);\r\n    form.reset();\r\n  };\r\n\r\n  function removeChatMsg() {\r\n    if (document.querySelector("#chatmsg") != null) {\r\n      terminal.removeChild(document.querySelector("#chatmsg"));\r\n    }\r\n  }\r\n\r\n  window.addEventListener("keydown", function (event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    key = event.key;\r\n\r\n    if ((document.activeElement).getAttribute("type") != "text") {\r\n      event.preventDefault();\r\n    }\r\n  }, true);\r\n\r\n  let deltaTimes = 0;\r\n  let amtToAverage = 50;\r\n  for (let i = 0; i < amtToAverage; i++) {\r\n    updateTime();\r\n    deltaTimes += deltaTime;\r\n  }\r\n  deltaTime = deltaTimes / amtToAverage;\r\n\r\n  setInterval(updateTime, 30);\r\n\r\n  setInterval(removeChatMsg, 10000);\r\n};\r\n\r\nfunction makeTree() {\r\n  let intString = [];\r\n  let width = 26;\r\n  let height = 14;\r\n  let amplitudeX = 3;\r\n  for (let j = 0; j < width; j++) {\r\n    for (let i = 0; i < height; i++) {\r\n      intString.push(0);\r\n    }\r\n  }\r\n  let initialSpot = {\r\n    x: parseInt(width / 2),\r\n    y: height - 1\r\n  };\r\n  let initialDirection = {\r\n    x: (Math.random() - 0.5),\r\n    y: 1\r\n  };\r\n  let trunkheight = Math.min(Math.random() * 10, 5);\r\n  let nextSpot = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  for (let i = 0; i < trunkheight; i++) {\r\n    intString[(parseInt(initialSpot.y) * width) + parseInt(initialSpot.x)] = 1;\r\n    initialSpot.x += initialDirection.x;\r\n    initialSpot.y -= initialDirection.y;\r\n    nextSpot.x = initialSpot.x;\r\n    nextSpot.y = initialSpot.y;\r\n  }\r\n  let nextSpots = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    let branchlength = Math.min(Math.random() * 5, 3);\r\n    let nextSpot2 = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n    let newDirection = {\r\n      x: (Math.random() - 0.5) * amplitudeX,\r\n      y: 1\r\n    };\r\n    for (let b = 0; b < branchlength; b++) {\r\n      intString[(parseInt(nextSpot.y) * width) + parseInt(nextSpot.x)] = 1;\r\n      nextSpot.x += newDirection.x;\r\n      nextSpot.y -= newDirection.y;\r\n      nextSpot2.x = initialSpot.x;\r\n      nextSpot2.y = initialSpot.y;\r\n    }\r\n    nextSpots.push(nextSpot2);\r\n  }\r\n  let nextSpotsClone = [...nextSpots];\r\n  let leafspots = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let t = 0; t < 3; t++) {\r\n      let finlength = Math.min(Math.random() * 5, 3);\r\n      let newDirection = {\r\n        x: (Math.random() - 0.5) * amplitudeX,\r\n        y: 1\r\n      };\r\n      let endOfThisBranch = {\r\n        x: 0,\r\n        y: 0\r\n      };\r\n      for (let b = 0; b < finlength; b++) {\r\n        intString[(parseInt(nextSpots[i].y) * width) + parseInt(nextSpots[i].x)] = 1;\r\n        nextSpots[i].x += newDirection.x;\r\n        nextSpots[i].y -= newDirection.y;\r\n        endOfThisBranch.x = nextSpots[i].x;\r\n        endOfThisBranch.y = nextSpots[i].y;\r\n      }\r\n      leafspots.push(endOfThisBranch);\r\n    }\r\n    nextSpots = [...nextSpotsClone];\r\n  }\r\n  for (let i of leafspots) {\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x)] = 3;\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x - 1)] = 3;\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x + 1)] = 3;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x - 1)] = 2;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x + 1)] = 2;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x - 2)] = 2;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x + 2)] = 2;\r\n  }\r\n  let string = "";\r\n  for (let j = 0; j < height; j++) {\r\n    for (let i = 0; i < width; i++) {\r\n      if (intString[(j * width) + i] === 0) {\r\n        string += "0";\r\n      }\r\n      if (intString[(j * width) + i] === 1) {\r\n        string += "a";\r\n      }\r\n      if (intString[(j * width) + i] === 2) {\r\n        string += "t";\r\n      }\r\n      if (intString[(j * width) + i] === 3) {\r\n        string += "j";\r\n      }\r\n    }\r\n  }\r\n  return string;\r\n}\r\n\r\nfunction makeBigTree() {\r\n  let intString = [];\r\n  let width = 25;\r\n  let height = 25;\r\n  let amplitudeX = 3;\r\n  for (let j = 0; j < width; j++) {\r\n    for (let i = 0; i < height; i++) {\r\n      intString.push(0);\r\n    }\r\n  }\r\n  let initialSpot = {\r\n    x: parseInt(width / 2),\r\n    y: height - 1\r\n  };\r\n  let initialDirection = {\r\n    x: (Math.random() - 0.5),\r\n    y: 1\r\n  };\r\n  let trunkheight = Math.min(Math.random() * 12, 5);\r\n  let nextSpot = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  for (let i = 0; i < trunkheight; i++) {\r\n    intString[(parseInt(initialSpot.y) * width) + parseInt(initialSpot.x)] = 1;\r\n    initialSpot.x += initialDirection.x;\r\n    initialSpot.y -= initialDirection.y;\r\n    nextSpot.x = initialSpot.x;\r\n    nextSpot.y = initialSpot.y;\r\n  }\r\n  let nextSpots = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    let branchlength = Math.min(Math.random() * 8, 6);\r\n    let nextSpot2 = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n    let newDirection = {\r\n      x: (Math.random() - 0.5) * amplitudeX,\r\n      y: 1\r\n    };\r\n    for (let b = 0; b < branchlength; b++) {\r\n      intString[(parseInt(nextSpot.y) * width) + parseInt(nextSpot.x)] = 1;\r\n      nextSpot.x += newDirection.x;\r\n      nextSpot.y -= newDirection.y;\r\n      nextSpot2.x = initialSpot.x;\r\n      nextSpot2.y = initialSpot.y;\r\n    }\r\n    nextSpots.push(nextSpot2);\r\n  }\r\n  let nextSpotsClone = [...nextSpots];\r\n  let leafspots = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let t = 0; t < 3; t++) {\r\n      let finlength = Math.min(Math.random() * 8, 6);\r\n      let newDirection = {\r\n        x: (Math.random() - 0.5) * amplitudeX,\r\n        y: 1\r\n      };\r\n      let endOfThisBranch = {\r\n        x: 0,\r\n        y: 0\r\n      };\r\n      for (let b = 0; b < finlength; b++) {\r\n        intString[(parseInt(nextSpots[i].y) * width) + parseInt(nextSpots[i].x)] = 1;\r\n        nextSpots[i].x += newDirection.x;\r\n        nextSpots[i].y -= newDirection.y;\r\n        endOfThisBranch.x = nextSpots[i].x;\r\n        endOfThisBranch.y = nextSpots[i].y;\r\n      }\r\n      leafspots.push(endOfThisBranch);\r\n    }\r\n    nextSpots = [...nextSpotsClone];\r\n  }\r\n  for (let i of leafspots) {\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x)] = 2;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x)] = 2;\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x - 1)] = 2;\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x + 1)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x - 1)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x + 1)] = 2;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x - 1)] = 3;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x + 1)] = 3;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x - 2)] = 3;\r\n    intString[(parseInt(i.y) * width) + parseInt(i.x + 2)] = 3;\r\n    intString[(parseInt(i.y + 1) * width) + parseInt(i.x)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x - 2)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x + 2)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x - 2)] = 2;\r\n    intString[(parseInt(i.y + 2) * width) + parseInt(i.x + 2)] = 2;\r\n    intString[(parseInt(i.y - 1) * width) + parseInt(i.x - 1)] = 3;\r\n    intString[(parseInt(i.y - 1) * width) + parseInt(i.x)] = 3;\r\n    intString[(parseInt(i.y - 1) * width) + parseInt(i.x + 1)] = 3;\r\n  }\r\n  let string = "";\r\n  for (let j = 0; j < height; j++) {\r\n    for (let i = 0; i < width; i++) {\r\n      if (intString[(j * width) + i] === 0) {\r\n        string += "0";\r\n      }\r\n      if (intString[(j * width) + i] === 1) {\r\n        string += "a";\r\n      }\r\n      if (intString[(j * width) + i] === 2) {\r\n        string += "n";\r\n      }\r\n      if (intString[(j * width) + i] === 3) {\r\n        string += "j";\r\n      }\r\n    }\r\n  }\r\n  return string;\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')}]);